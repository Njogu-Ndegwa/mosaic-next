"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

type AccessToken {
  accessToken: String
  refreshToken: String
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  email: String
  agentType: AgentTypes
  agentId: String
  hireDate: DateTime
  officeAddress: ID
  idString: String
  type: String
  name: String
  profile: String
  authenticationInstance: ID
  subrole: ID
  role: ID
  roleName: String
  subRoleName: String
  firstName: String
  lastName: String
}

enum AccountActions {
  CREATE
  ACTIVATE
  CREDIT
  DEBIT
  SUSPEND
  RESOLVE
  FREEZE
  INBOUND_MESSAGE
  OUTBOUND_MESSAGE
}

enum AccountStatus {
  INACTIVE
  ACTIVE
  SUSPENDED
}

type Action {
  type: ActionTypes!
  label: String!
  description: String!
}

input ActionDto {
  type: ActionTypes! = SYSTEM
  label: String! = "eIOT"
  description: String! = "Action Generated by OVES IoT Device"
}

input ActionFilterInput {
  type: StringFilterInput
  name: StringFilterInput
  description: StringFilterInput
}

enum ActionScope {
  GLOBAL
  SYSTEM
  MANAGEMENT
  DEVELOPMENT
  CLIENT
}

enum ActionTypes {
  GLOBAL
  SYSTEM
  MANAGEMENT
  DEVELOPMENT
  CLIENT
}

type Activity {
  action: AccountActions!
  datetime: DateTime!
  amount: Float
  notes: String
  transactionId: String
  senderAccountNumber: String
  senderAccountName: String
  status: ActivityStatus
  description: String
}

input ActivityDto {
  action: String!
  datetime: DateTime!
  amount: Float!
  notes: String!
}

enum ActivityStatus {
  CREATED
  FAILED
  DELIVERED
}

type Actor {
  type: ActorTypes!
  name: String!
  description: String!
}

input ActorDto {
  type: ActorTypes! = DEVICE
  name: String! = "eIOT"
  description: String! = "Default Actor Description"
}

input ActorFilterInput {
  type: StringFilterInput
  name: StringFilterInput
  description: StringFilterInput
}

enum ActorTypes {
  DEVICE
  PERSON
  PLACE
  ORGANIZATION
  EVENT
  ACCOUNT
  SOFTWARE
}

type Address {
  unit: String!
  street: String!
  city: String!
  srpc: String!
  country: String!
  postcode: String!
  addressLocation: AddressLocation!
}

input AddressDto {
  unit: String!
  street: String!
  city: String!
  srpc: String!
  country: String!
  postcode: String!
  locationAddressDto: AddressLocationDto!
}

type AddressLocation {
  addressLatitude: Float!
  addressLongitude: Float!
}

input AddressLocationDto {
  inputAddressLatitude: Float!
  inputAddressLongitude: Float!
}

input AdminRegisterDistributorInput {
  distributorType: OrgTypes = DISTRIBUTOR
  distributorName: String = "OVES Distributor"
  distributorDescription: String = "Standard PAYG Distribution Established in 2021"
  distributorAddress: AddressDto!
  email: String!
  roleId: ID
  contactRole: String!
}

input AdminRegisterServicerInput {
  servicerType: OrgTypes = SERVICER
  servicerName: String = "OVES Servicer"
  servicerDescription: String = "Standard PAYG Distribution Established in 2021"
  servicerAddress: AddressDto!
  email: String!
  roleId: ID!
  contactRole: String!
}

type Agent {
  _id: ID!
  assetAccount: [AssetAccount!]
  authenticationSubInstance: AuthenticationSubInstance
  clientExclusiveServicePermissions: [ClientExclusiveServicePermissions!]
  subRolePermissions: SubRolePermissions
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String!
  lastName: String!
  gender: String
  age: Float
  contact: Contact!
  address: Address!

  """Specify the type of agent for the distributor staff"""
  typeOfAgent: String!
  agentType: String!
  subrole: SubRoles!
  refreshClientToken: RefreshClientToken
  distributorStaff: DistributorStaff!
  agentID: String!
  hireDate: DateTime!
  officeAddress: Address!
  items: [Item!]
}

type AgentConnection {
  edges: [AgentEdge!]
  pageInfo: AgentPageInfo
}

type AgentEdge {
  cursor: String
  node: Agent
}

type AgentPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

enum AgentTypes {
  SERVICE
  SALES
  COLLECTION
}

type AssetAccount {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  manager: Distributor!
  agent: Agent
  user: Person!
  credit: CreditAccount!
  asset: Item!
  paySchedule: [Payment!]

  """Default Stage is 'ASSET_ACCOUNT_CREATED'"""
  accountStage: AssetAccountStages!
  paymentPlan: PayPlanBaseEntity
  meta: [AssetAccountMeta!]
  eventId: String
}

type AssetAccountConnection {
  edges: [AssetAccountEdge!]
  pageInfo: AssetAccountPageInfo
}

type AssetAccountEdge {
  cursor: String
  node: AssetAccount
}

input AssetAccountInput {
  clientId: ID!
  userId: ID!
  credit: CreditAccountDTO!
  itemId: ID!
  paySchedule: PaymentDTO
  paymentPlan: PayPlanBaseEntityDto
  meta: [AssetAccountMetaDto!]
}

input AssetAccountListInput {
  assetAccounts: [AssetAccountInput!]!
}

type AssetAccountMeta {
  name: String
  value: String
}

input AssetAccountMetaDto {
  name: String!
  value: String!
}

type AssetAccountPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

enum AssetAccountProcessStatus {
  CREATED
  PROCESSING
  COMPLETE
  FAILED
}

enum AssetAccountStages {
  ASSET_ACCOUNT_CREATED
  ASSET_USER_PAIRED
  PAYPLAN_LOCKED
  ACCOUNT_ACTIVATED
  ASSET_UNLOCKED
  PAYPLAN_COMPLETED
  ACCOUNT_CLOSED
}

type AssetAccountTempData {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  status: AssetAccountProcessStatus!
  data: JSONObject
  csvData: JSONObject

  """
  This is seller designated ID, unique within range. Cannot be null. Default same as oemItemID
  """
  sellerItemID: String!
  itemID: String
  assetAccountID: String
  customerID: String
  paired: Boolean
  updated: Boolean
}

type AssetAccountTempDataConnection {
  edges: [AssetAccountTempDataEdge!]
  pageInfo: AssetAccountTempDataPageInfo
}

type AssetAccountTempDataEdge {
  cursor: String
  node: AssetAccountTempData
}

type AssetAccountTempDataPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

input AssignAssetAccountToAgentInput {
  assetAccountIds: [ID!]!
  agentId: ID!
}

input AssignBulkItemToItemFleetInput {
  itemFleetId: ID!
  oemItemId: [String!]!
}

input AssignClientExclusiveServicePermissionToClientExclusiveServiceInput {
  permissions: [PermissionInput!]!
  clientExclusiveServiceId: ID!
  distributorId: ID!

  """
  If a value is not provided, the default authentication instance will be used
  """
  authenticationInstanceId: ID
}

input AssignCodeGeneratorToItemInput {
  codeGeneratorId: ID!
  itemId: ID!
}

input AssignCustomerToAgentInput {
  agentId: ID!
  customers: [ID!]!
}

input AssignDistributorClientExclusiveServiceTypeInput {
  servicerId: ID!
  distributorId: ID!
  serviceType: ClientExclusiveServiceTypes!
}

input AssignItemBatchToItemFleetInput {
  itemFleetId: ID!
  itemBatchId: ID!
}

input AssignItemToAgentInput {
  agentId: ID!
  items: [ID!]!
}

input AssignItemToItemFleetInput {
  itemFleetId: ID!
  itemId: ID!
}

input AssignPermissionToRoleInput {
  roleId: ID!
  authenticationInstanceId: ID!
  permissions: [PermissionInput!]!
}

input AssignPermissionToSubRoleInput {
  subRoleId: ID
  permissions: [PermissionInput!]!
  agentId: ID!
}

input AssignRoleToUserInput {
  roleId: ID!
  userId: ID!
}

type Attribute {
  prop: String!
  value: String!
  meta: String!
}

input AttributeDto {
  prop: String!
  value: String!
  meta: String!
}

type AuthAddress {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  unit: String!
  street: String!
  city: String!
  srpc: String!
  country: String!
  postcode: String!
}

type AuthenticationInstance {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  distributor: [Distributor!]!
  supplier: [Supplier!]!
  servicer: [Servicer!]!
  organization: [Organization!]!
}

type AuthenticationInstanceConnection {
  edges: [AuthenticationInstanceEdge!]
  pageInfo: AuthenticationInstancePageInfo
}

type AuthenticationInstanceEdge {
  cursor: String
  node: AuthenticationInstance
}

type AuthenticationInstancePageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type AuthenticationSubInstance {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  distributor: Distributor
  supplier: Supplier
  servicer: Servicer
  organization: Organization
  authenticationInstance: AuthenticationInstance!
  subInstanceStatus: InstanceStatusInput!
}

type AuthenticationSubInstanceConnection {
  edges: [AuthenticationSubInstanceEdge!]
  pageInfo: AuthenticationSubInstancePageInfo
}

type AuthenticationSubInstanceEdge {
  cursor: String
  node: AuthenticationSubInstance
}

type AuthenticationSubInstancePageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type AuthToken {
  accessToken: String
  refreshToken: String
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  email: String
  agentType: AgentTypes
  agentId: String
  hireDate: DateTime
  officeAddress: AuthAddress
  idString: String
  type: String
  name: String
  profile: String
  idType: PersonalIDTypes
  birthDate: DateTime
  authenticationInstance: AuthenticationInstance
  actionScope: ActionScope
  subrole: SubRoles
  role: Roles
  roleName: String
  subRoleName: String
  firstName: String
  lastName: String
}

type Avatar {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  triggers: [String!]!
  type: ActorTypes!
  actionScope: ActionScope!
  actorName: String!
  profile: String
  item: Item!

  """Status of item online status"""
  itemAlive: Boolean!
  lastSync: DateTime!
  lastPub: String!
  lastSub: String!
  att: [Attribute!]
  sts: [Attribute!]
  cmd: [Attribute!]
  dta: [Attribute!]
  dia: [Attribute!]
}

type AvatarConnection {
  edges: [AvatarEdge!]
  pageInfo: AvatarPageInfo
}

type AvatarEdge {
  cursor: String
  node: Avatar
}

type AvatarPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

interface BaseEntity {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input BatchCodeInput {
  batchId: ID!
  codeDays: Int = 1
}

type BatchCodeResponse {
  batchCodes: [BatchCodeResponseDTO!]!
  error: [String!]
}

type BatchCodeResponseDTO {
  codeGenerator: String!
  itemId: String!
}

type BatchFactoryExportDto {
  oemItemID: String!
  sellerItemID: String!
  hashTop: String!
  hashRoot: String!
  batchNumber: String!
  skuName: String!
  codeDecString: String!
}

input BatchInitializeInput {
  itembatchId: ID!
}

enum BatchState {
  Submitted
  Scheduled
  Completed
}

type Broker {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  url: String!
  port: Int
  login: String
  password: String
}

type BrokerConnection {
  edges: [BrokerEdge!]
  pageInfo: BrokerPageInfo
}

type BrokerEdge {
  cursor: String
  node: Broker
}

type BrokerPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type BulkAssignItemsToFleetDTOResponse {
  oemItemId: String!
  itemId: String!
  fleetId: String!
}

type BulkAssignItemsToFleetResponse {
  itemsPassed: [BulkAssignItemsToFleetDTOResponse!]!
  error: [String!]
}

type BulkCopyCodeEventsDTOResponse {
  codeEventId: String!
  codeDecString: String!
  codeGenId: String
  codeNumber: Int
  codeHexString: String!
}

type BulkCopyCodeEventsResponse {
  codeEventsPassed: [BulkCopyCodeEventsDTOResponse!]!
  error: [String!]
}

input BulkCopyLegacyCodeGenParametersInput {
  hashRoot: String!
  hashTop: String!
  codeCount: Int!
  hashIndex: Int!
  codeReversalCount: Int!

  """Default number of FREECODES is 5"""
  freeCodeCount: Int = 5

  """Default number of RESETCODES is 5"""
  resetCodeCount: Int = 5
}

type BulkCreateItemDTOResponse {
  itemId: String!
  oemItemId: String!
  codeGenId: String
}

input BulkCreateItemInput {
  itemStockId: ID
  idString: String

  """Default ItemID is 'OVES'"""
  oemID: String = "OVES"

  """
  oemItemID cannot be null.  It must be provided in a conformal format PROD+YYMM+000000
  """
  oemItemID: String!

  """Identified a seller, such as 'ANGAZA'."""
  sellerID: String = "OVES"

  """
  This is seller designated ID, unique within range.  Cannot be null.  Default same as oemItemID
  """
  sellerItemID: String!
  itembatchId: ID!
  itemFleetId: ID
  itemfirmwareId: ID!
  codegenerator: BulkCopyLegacyCodeGenParametersInput
}

type BulkCreateItemResponse {
  itemsPassed: [BulkCreateItemDTOResponse!]!
  error: [String!]
}

type BulkUpdateCodeGenHashTopDTOResponse {
  codeGenId: String!
  hashTop: String!
}

type BulkUpdateCodeGenHashTopResponse {
  codegensPassed: [BulkUpdateCodeGenHashTopDTOResponse!]!
  error: [String!]
}

type BulkUpdateLegacyCodeGenParametersDTOResponse {
  itemId: ID!
  message: String!
}

input BulkUpdateLegacyCodeGenParametersInput {
  bulkCodegens: [UpdateLegacyCodeGenParametersInput!]!
}

type BulkUpdateLegacyCodeGenParametersResponse {
  itemsPassed: [BulkUpdateLegacyCodeGenParametersDTOResponse!]!
  error: [String!]
}

input ChangeLoginUserAuthenticationInstanceInput {
  loginUserId: ID!
  authenticationInstanceId: ID!
}

type ClientExclusiveService {
  _id: ID!
  clientExclusiveServicePermissions: [ClientExclusiveServicePermissions!]
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  servicer: Servicer!
  distributor: Distributor!
  servicetype: ClientExclusiveServiceTypes!
}

type ClientExclusiveServiceConnection {
  edges: [ClientExclusiveServiceEdge!]
  pageInfo: ClientExclusiveServicePageInfo
}

type ClientExclusiveServiceEdge {
  cursor: String
  node: ClientExclusiveService
}

type ClientExclusiveServicePageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type ClientExclusiveServicePermissions {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  name: PermissionInput
  permission: Permissions
  clientExclusiveService: ClientExclusiveService
  distributorId: Distributor
  authenticationInstance: AuthenticationInstance
  distributor: Distributor
}

type ClientExclusiveServicePermissionsConnection {
  edges: [ClientExclusiveServicePermissionsEdge!]
  pageInfo: ClientExclusiveServicePermissionsPageInfo
}

type ClientExclusiveServicePermissionsEdge {
  cursor: String
  node: ClientExclusiveServicePermissions
}

type ClientExclusiveServicePermissionsPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

enum ClientExclusiveServiceTypes {
  PAYGO
  PAYMENTS
}

input ClientRegisterPersonInput {
  clientPersonType: PersonTypes = LOGIN
  clientPersonName: String!
  clientPersonDescription: String
  clientContactPerson: PersonContactDto!
  clientPersonAddress: AddressDto!

  """This value is the distributorId"""
  clientId: ID
  gender: String
  details: [DetailDto!]
}

type CloudinaryDockerStandaloneResponse {
  name: String!
  url: String!
}

type CodeEvent {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  triggers: [String!]!
  type: ActorTypes!
  actionScope: ActionScope!
  actorName: String!
  profile: String
  codeType: CodeTypes!
  codeDays: Int!
  codeNumber: Int
  codeGenerator: CodeGenerator!
  codeHexString: String!
  codeDecString: String!
  description: String
  hashIndex: Int
  hashTop: String
  hashRoot: String
  codeCount: Int
  userWhoCausedTheChange: String
  typeOfChangeChange: String
  descriptionOfChangeChange: String
}

type CodeEventConnection {
  edges: [CodeEventEdge!]
  pageInfo: CodeEventPageInfo
}

type CodeEventEdge {
  cursor: String
  node: CodeEvent
}

type CodeEventPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type CodeGenerator {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  triggers: [String!]!
  type: ActorTypes!
  actionScope: ActionScope!
  actorName: String!
  profile: String
  codeSystem: CodeSystem!
  hashRoot: String!
  hashTop: String!
  hashTopInitial: String
  codeCount: Int!
  hashIndex: Int!
  codeReversalCount: Int!
  freeCodeCount: Int!
  resetCodeCount: Int!
  codeHistory: [CodeEvent!]
  userWhoCausedTheChange: String
  typeOfChangeChange: String
  descriptionOfChangeChange: String
  codeLimits: CodeLimits
}

type CodeGeneratorConnection {
  edges: [CodeGeneratorEdge!]
  pageInfo: CodeGeneratorPageInfo
}

type CodeGeneratorEdge {
  cursor: String
  node: CodeGenerator
}

type CodeGeneratorPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

input CodeGenHashTopParameters {
  codeGenId: String!
  hashTop: String!
  hashIndex: Int = 9999
}

input CodeGenState {
  codeGenId: ID!
  itemId: ID!
  hashRoot: String!
  hashTop: String!
  hashIndex: Int!
}

enum CodeGenUsed {
  OVES
  OPENTOKEN
}

type CodeLimits {
  freeCodeCount: Int!
  resetCodeCount: Int!
}

type CodeResponse {
  codeType: CodeTypes!
  codeHex: String!
  codeDec: String!
}

type CodeSystem {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime

  """Code system.  Current systems are ACP1 and ACP2."""
  system: CodeSystemType!

  """Default code systems is ACP1, with hashChainLength = 100000."""
  hashChainLength: Int!

  """Default code systems is ACP2, with hashMaxJump = 1095."""
  hashMaxJump: Int!

  """Default code systems is ACP2, with freeCodeJump = 1096."""
  freeCodeJump: Int!

  """Default code systems is ACP2, with freeCodeJump = 2192."""
  resetCodeJump: Int!

  """
  Default code systems is ACP1. Codes available for ACP1 = [CodeTypes.DAYSCODE, CodeTypes.FREECODE, CodeTypes.RESETCODE]
  """
  codeRange: [CodeTypes!]!
}

type CodeSystemConnection {
  edges: [CodeSystemEdge!]
  pageInfo: CodeSystemPageInfo
}

type CodeSystemEdge {
  cursor: String
  node: CodeSystem
}

type CodeSystemPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

enum CodeSystemType {
  ACP1
  ACP2
}

enum CodeTypes {
  FREECODE
  DAYSCODE
  RESETCODE
  SYNCCODE
  JUMPCODE
}

type Contact {
  phone: String!
  email: String!
  social: String!
}

input ContactDto {
  phone: String!
  social: String!
}

input CopyLegacyAndProvisionInput {
  itemStockId: ID
  idString: String

  """Default ItemID is 'OVES'"""
  oemID: String = "OVES"

  """
  oemItemID cannot be null.  It must be provided in a conformal format PROD+YYMM+000000
  """
  oemItemID: String!

  """Identified a seller, such as 'ANGAZA'."""
  sellerID: String = "OVES"

  """
  This is seller designated ID, unique within range.  Cannot be null.  Default same as oemItemID
  """
  sellerItemID: String!
  itembatchId: ID!
  itemFleetId: ID
  itemfirmwareId: ID!
  codegeneratorId: ID
}

input CopyLegacyCodeEventParametersInBulkInput {
  bulkCodeEvents: [CopyLegacyCodeEventParametersInput!]!
}

input CopyLegacyCodeEventParametersInput {
  codeGenerator: ID!
  codeType: CodeTypes!
  codeDays: Int!
  codeNumber: Int
  codeHexString: String!
  codeDecString: String!
  description: String
}

input CopyLegacyCodeGenParametersInput {
  codeSystemId: ID!
  itemId: ID!
  hashRoot: String!
  hashTop: String!
  codeCount: Int!
  hashIndex: Int!
  codeReversalCount: Int!

  """Default number of FREECODES is 5"""
  freeCodeCount: Int = 5

  """Default number of RESETCODES is 5"""
  resetCodeCount: Int = 5
}

input CreateAuthenticationInstanceInput {
  name: String!
}

input CreateAuthenticationSubInstanceInput {
  name: String!
  distributorId: ID!
  activeAuthenticationInstanceId: ID!
}

input CreateAvatarInput {
  """Provide ID for the corresponding Item"""
  shadow: ID!

  """Status of item online status"""
  itemAlive: Boolean = false
  lastSync: DateTime!
  lastPub: String!
  lastSub: String!
  att: [AttributeDto!]
  sts: [AttributeDto!]
  cmd: [AttributeDto!]
  dta: [AttributeDto!]
  dia: [AttributeDto!]
}

input CreateBrokerInput {
  name: String = "Omnivoltaic Open MQTT"
  url: String = "mqtt-2.omnivoltaic.com"
  port: Int = 1883
  login: String
  password: String
}

input CreateDistributorTIGStackSubDomainInput {
  distributorId: ID!
  name: String!
  distributorEmail: String!
  distributorGrafanaPort: Int!
  distributorInfluxDBPort: Int!
  distributorMQTTPort: Int!
  distributorMQTTPassword: String!
}

type CreateDistributorTIGStackSubDomainResponse {
  distributorTigStackURL: String!
}

input CreateEventInput {
  actor: ActorDto!
  action: ActionDto!
  time: DateTime!
  location: LocationInputDto!
  signal: Boolean!
}

input CreateItemBatchInput {
  """batchNumber has a pattern of ProductClassBases+YYMM+123456"""
  batchNumber: String!

  """ItemSKU must be explicitly specified."""
  itemSKUId: ID!
  batchDate: DateTime!
  description: String = "Please add description of batch!"
}

input CreateItemEventInput {
  actor: ActorDto!
  action: ActionDto!
  time: DateTime!
  location: LocationInputDto!
  signal: Boolean!
  status: ProcessStatusTypes! = STARTED
  type: ItemEventTypes! = INITIALIZATION
  description: String! = "Default Item Event Description"
  total: Int
  processed: Int
  lastProcessedId: String
}

input CreateItemFirmwareInput {
  version: String!
  description: String
  codeSystem: CodeSystemType!
}

input CreateItemFleetInput {
  description: String!

  """Default number of FREECODES is 5"""
  freeCodeCount: Int
  disableFreeCode: Boolean

  """Default number of RESETCODES is 5"""
  resetCodeCount: Int
  disableResetCodeCount: Boolean

  """Number of code events allowed for an item within 24 hours."""
  dayCodeCountLimit: Int
  disableDayCodeCountLimit: Boolean

  """
  Total number of code events allowed for an item. Default is approximately 3 years (1096 events).
  """
  totalCodeCountLimit: Int
  disableTotalCodeCountLimit: Boolean

  """
  Minimum time (in milliseconds) between two subsequent code events for an item. Default is 1 minute.
  """
  codeGenInterval: Int
  disableCodeGenInterval: Boolean

  """
  Maximum number of days code that an item can have in a given period. Default is 60
  """
  maxCreditStackDays: Int
  disableMaxCreditStackDays: Boolean

  """
  `n` number of code event used to calculate the credit stackings. Default is 5
  """
  maxCreditStackCodeEvents: Int
  disableMaxCreditStackCodeEvents: Boolean

  """Number of days to check duration of day codes"""
  daysToCheckDuration: Int
  disableDaysToCheckDuration: Boolean

  """Minimum number of day codes generated in a specified duration"""
  minimumDayCodesGenerated: Int
  disableMinimumDayCodesGenerated: Boolean
  fleetName: String!
  assignDate: DateTime!
}

input CreateItemInput {
  itemStockId: ID
  idString: String

  """Default ItemID is 'OVES'"""
  oemID: String = "OVES"

  """
  oemItemID cannot be null.  It must be provided in a conformal format PROD+YYMM+000000
  """
  oemItemID: String!

  """Identified a seller, such as 'ANGAZA'."""
  sellerID: String = "OVES"

  """
  This is seller designated ID, unique within range.  Cannot be null.  Default same as oemItemID
  """
  sellerItemID: String
  itembatchId: ID!
  itemFleetId: ID
  itemfirmwareId: ID!
  codegeneratorId: ID
  totalProducts: Float
  createWithoutQueue: Boolean
  code: String
}

input CreateItemsInBulkInput {
  bulkItems: [BulkCreateItemInput!]!
}

input CreateItemSKUInput {
  skuName: String!
  productBase: String!
  mainMediaURL: ID
  oemDescription: String
  gatt: GattDto
}

input CreateItemStockInput {
  stockName: String!
  locator: String!
  stockCosts: Float!
  batchId: ID!
  quantity: Int!
  itemList: [ItemDto!]!
}

input CreateMessageFromTemplateInput {
  messageGroupId: ID!
  messageTemplateId: ID!
}

input CreateMessageGroupInput {
  name: String!
  description: String!
  persons: [PersonDto!]
  distributor: ID!
  searchQuery: String
  assetAccountQuery: String
  personQuery: String
}

input CreateMessageTemplateInput {
  name: String!
  description: String!
  messageBody: String!
  distributor: ID!
  intent: IntentsEnum!
  messageCourier: MessageCourierEnum
}

input CreateMQTTBrokerInput {
  name: String! = "Omnivoltaic Open MQTT"
  url: String! = "mqtt-2.omnivoltaic.com"
  port: Int! = 1883
  login: String
  password: String
}

input CreateOrganizationInput {
  orgType: OrgTypes = DISTRIBUTOR
  orgName: String = "OVES Distributor"
  orgProfile: String!
  orgDescription: String = "Standard PAYG Distribution Established in 2021"
  orgAddress: AddressDto!
  contactRole: String!
}

input CreatePayPlanInput {
  """
  Default plan type is NO-PLAN, indicating manual payment and code generation
  """
  planName: String = "NO-PLAN"
  planDescription: String!
  useUpfront: Boolean
  planDetails: [PlanDetailDto!]
}

input CreatePermissionInput {
  permissions: [PermissionInput!]!
}

input CreatePublisherInput {
  topic: String!
  broker: ID!
}

input CreateRoleInput {
  name: String!
}

input CreateSignalInput {
  jmp: JSON!
  publisher: ID
  time: DateTime!
}

input CreateSubRoleInput {
  name: SubRoleTypesInput!
  roleId: ID!
}

input CreateSubscriberInput {
  topic: String!
  brokerId: ID
}

input CreateSupplierInput {
  supplierType: OrgTypes = DISTRIBUTOR
  supplierName: String = "OVES Distributor"
  supplierDescription: String = "Standard PAYG Distribution Established in 2021"
  supplierAddress: AddressDto!
  contactRole: String!
}

type CreditAccount {
  owner: Person!
  currency: String!
  balance: Float!
  totalAmountPaid: Float
  activities: [Activity!]
  accountStatus: AccountStatus!
}

input CreditAccountDTO {
  customerId: ID!
  currency: String!
  balance: Float!
  activities: [ActivityDto!]
  totalAmountPaid: Float
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime!]
  or: [DateTime!]
  not: DateTimeFilterInput
  eq: DateTime
  ne: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime!]
  notIn: [DateTime!]
  between: [DateTime!]
}

input DeductDeviceCalenderDaysInput {
  oem_item_id: String!
}

input DetailDto {
  name: String!
  value: String!
}

type Distributor {
  _id: ID!
  assetAccount: [AssetAccount!]
  authenticationSubInstance: AuthenticationSubInstance
  clientExclusiveServicePermissions: [ClientExclusiveServicePermissions!]
  subRolePermissions: SubRolePermissions
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  type: OrgTypes!
  name: String!
  description: String
  orgAddress: Address!
  orgContactPerson: Person
  authenticationInstance: AuthenticationInstance!
  activeSubRolePermission: PermissionInput
  role: Roles!
  mqtt_password: String
  distributorMQTTPort: Int
  distributorGrafanaPort: Int
  distributorInfluxDBPort: Int
  delegateAuthorityToServicer: Boolean
  clientExclusiveService: [ClientExclusiveService!]
  settings: DistributorSetting
  itemFleet: [ItemFleet!]!
  itemSKU: [ItemSKU!]
}

type DistributorConnection {
  edges: [DistributorEdge!]
  pageInfo: DistributorPageInfo
}

type DistributorEdge {
  cursor: String
  node: Distributor
}

type DistributorPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

input DistributorRegisterDistributorStaffInput {
  subRoleId: ID!
  staffID: String!
  hireDate: DateTime!
  officeAddress: AddressDto!
  email: String!
  firstName: String!
  lastName: String!
  gender: String
  age: Float
  staffContact: ContactDto!
  staffAddress: AddressDto!
}

type DistributorSetting {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime

  """Default number of FREECODES is 5"""
  freeCodeCount: Int

  """Default number of RESETCODES is 5"""
  resetCodeCount: Int

  """Number of code events allowed for an item within 24 hours."""
  dayCodeCountLimit: Int

  """
  Total number of code events allowed for an item. Default is approximately 3 years (1096 events).
  """
  totalCodeCountLimit: Int

  """
  Minimum time (in milliseconds) between two subsequent code events for an item. Default is 1 minute.
  """
  codeGenInterval: Int

  """
  Maximum number of days code that an item can have in a given period. Default is 60
  """
  maxCreditStackDays: Int!

  """
  `n` number of code event used to calculate the credit stackings. Default is 5
  """
  maxCreditStackCodeEvents: Int!
}

type DistributorStaff {
  _id: ID!
  authenticationSubInstance: AuthenticationSubInstance
  clientExclusiveServicePermissions: [ClientExclusiveServicePermissions!]
  subRolePermissions: SubRolePermissions
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String!
  lastName: String!
  gender: String
  age: Float
  contact: Contact!
  address: Address!
  subrole: SubRoles!
  refreshClientToken: RefreshClientToken
  distributor: Distributor!
  staffID: String!
  hireDate: DateTime!
  officeAddress: Address!
}

type DistributorStaffConnection {
  edges: [DistributorStaffEdge!]
  pageInfo: DistributorStaffPageInfo
}

type DistributorStaffEdge {
  cursor: String
  node: DistributorStaff
}

type DistributorStaffPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

input DistributorStaffRegisterAgentInput {
  firstName: String!
  lastName: String!
  gender: String
  age: Float
  agentContact: ContactDto!
  agentAddress: AddressDto!
  email: String!

  """Specify the type of agent for the distributor staff"""
  typeOfAgent: String!
  agentType: String!
  subRoleId: ID!
  agentID: String!
  hireDate: DateTime!
  officeAddress: AddressDto!
}

type Event {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  actor: Actor!
  action: Action!
  time: DateTime!
  eventLocation: Location!
  signal: Signal
}

type EventConnection {
  edges: [EventEdge!]
  pageInfo: EventPageInfo
}

type EventEdge {
  cursor: String
  node: Event
}

type EventPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

input FloatFilterInput {
  and: [Float!]
  or: [Float!]
  not: FloatFilterInput
  eq: Float
  ne: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Float
  notNull: Boolean
  in: [Float!]
  notIn: [Float!]
  between: [Float!]
}

type GATT {
  name: String!
  attributes: [Attribute!]
}

input GattDto {
  name: String!
  attributes: [AttributeDto!]
}

input GenerateCodeInput {
  itemId: ID!
  description: String
}

input GenerateDaysCodeInput {
  itemId: ID!
  codeDays: Int!
  description: String
}

input GenerateUserRoleSignUpTokenInput {
  email: String!
  roleId: ID!
}

type GetAllAgentsResponse {
  page: AgentConnection!
  pageData: PageData
}

input GetAllAssetAccountsInput {
  id: IdFilterInput
  paymentSchedule: StringFilterInput
  accountStage: StringFilterInput
}

type GetAllAssetAccountsResponse {
  page: AssetAccountConnection!
  pageData: PageData
}

type GetAllAssetAccountsTempDataResponse {
  page: AssetAccountTempDataConnection!
  pageData: PageData
}

type GetAllAuthenticationInstancesResponse {
  page: AuthenticationInstanceConnection!
  pageData: PageData
}

type GetAllAuthenticationSubInstancesResponse {
  page: AuthenticationSubInstanceConnection!
  pageData: PageData
}

type GetAllAvatarsResponse {
  page: AvatarConnection!
  pageData: PageData
}

input GetAllBrokersInput {
  id: IdFilterInput
  name: StringFilterInput
  url: StringFilterInput
  login: StringFilterInput
}

type GetAllBrokersResponse {
  page: BrokerConnection!
  pageData: PageData
}

type GetAllClientExclusiveServicePermissionsResponse {
  page: ClientExclusiveServicePermissionsConnection!
  pageData: PageData
}

type GetAllClientExclusiveServiceResponse {
  page: ClientExclusiveServiceConnection!
  pageData: PageData
}

input GetAllClientItemsInItemFleet {
  itemFleetId: ID!
  clientId: ID!
}

type GetAllCodeEventsResponse {
  page: CodeEventConnection!
  pageData: PageData
}

type GetAllCodeGeneratorsResponse {
  page: CodeGeneratorConnection!
  pageData: PageData
}

input GetAllCodeSystemsInput {
  id: IdFilterInput
  system: StringFilterInput
  codeRange: StringFilterInput
}

type GetAllCodeSystemsResponse {
  page: CodeSystemConnection!
  pageData: PageData
}

type GetAllDistributorsResponse {
  page: DistributorConnection!
  pageData: PageData
}

type GetAllDistributorStaffResponse {
  page: DistributorStaffConnection!
  pageData: PageData
}

input GetAllEventsInput {
  actor: ActorFilterInput
  action: ActionFilterInput
  time: DateTimeFilterInput
  location: LocationFilterInput
  signal: IdFilterInput
}

type GetAllEventsResponse {
  page: EventConnection!
  pageData: PageData
}

input GetAllItemBatchesInput {
  id: IdFilterInput
  batchNumber: StringFilterInput
  batchDate: StringFilterInput
  description: StringFilterInput
  batchState: StringFilterInput
}

type GetAllItemBatchesResponse {
  page: ItemBatchConnection!
  pageData: PageData
}

type GetallItemEventsResponse {
  page: ItemEventConnection!
  pageData: PageData
}

input GetAllItemFirmwaresInput {
  id: IdFilterInput
  version: StringFilterInput
  codeSystem: StringFilterInput
  description: StringFilterInput
}

type GetAllItemFirmwaresResponse {
  page: ItemFirmwareConnection!
  pageData: PageData
}

input GetAllItemFleetsInput {
  id: IdFilterInput
  fleetName: StringFilterInput
  assignDate: StringFilterInput
  description: StringFilterInput
}

type GetAllItemFleetsResponse {
  page: ItemFleetConnection!
  pageData: PageData
}

input GetAllItemSKUsInput {
  id: IdFilterInput
  skuName: StringFilterInput
  productBase: StringFilterInput
  oemDescription: StringFilterInput
  properties: StringFilterInput
}

type GetAllItemSKUsResponse {
  page: ItemSKUConnection!
  pageData: PageData
}

type GetAllItemsResponse {
  page: ItemConnection!
  pageData: PageData
}

input GetAllItemStocksInput {
  id: IdFilterInput
  stockName: StringFilterInput
  locator: StringFilterInput
}

type GetAllItemStocksResponse {
  page: ItemStockConnection!
  pageData: PageData
}

type GetAllLoginUsersResponse {
  page: LoginUsersConnection!
  pageData: PageData
}

type GetAllMessageGroupResponse {
  page: MessageGroupConnection!
  pageData: PageData
}

type GetAllMessageTemplateResponse {
  page: MessageTemplateConnection!
  pageData: PageData
}

type GetAllOrganizationsResponse {
  page: OrganizationConnection!
  pageData: PageData
}

type GetAllPayPlansResponse {
  page: PayPlanTemplateConnection!
  pageData: PageData
}

type GetAllPermissionsResponse {
  page: PermissionsConnection!
  pageData: PageData
}

type GetAllPersonsResponse {
  page: PersonConnection!
  pageData: PageData
}

type GetAllPublishersResponse {
  page: PublisherConnection!
  pageData: PageData
}

type GetAllRolesResponse {
  page: RolesConnection!
  pageData: PageData
}

type GetAllServicersResponse {
  page: ServicerConnection!
  pageData: PageData
}

input GetAllSignalsInput {
  jmp: StringFilterInput
  time: DateTimeFilterInput
}

type GetAllSignalsResponse {
  page: SignalConnection!
  pageData: PageData
}

type GetAllSubRolesResponse {
  page: SubRolesConnection!
  pageData: PageData
}

input GetAllSubscribersInput {
  id: IdFilterInput
  topic: StringFilterInput
}

type GetAllSubscribersResponse {
  page: SubscriberConnection!
  pageData: PageData
}

type GetAllSuppliersResponse {
  page: SupplierConnection!
  pageData: PageData
}

type GetPermissionsForSubRoleResponse {
  page: SubRolePermissionsConnection!
  pageData: PageData
}

input GetSpecificClientItemInItemFleet {
  itemFleetId: ID!
  clientId: ID!
  itemId: ID!
}

input GetSpecificRolePermissionByPermissionNameInput {
  roleId: ID!
  authenticationInstanceId: ID!
  permissionName: String!
}

input GetSpecificRolePermissionsInput {
  roleId: ID!
  authenticationInstanceId: ID!
}

type GetSpecificRolePermissionsResponse {
  page: RolesPermissionsConnection!
  pageData: PageData
}

input GetSpecificSubRolePermissionByPermissionNameInput {
  agentId: ID!
  authenticationInstanceId: ID!
  permissionName: String!
}

input IdFilterInput {
  and: [ID!]
  or: [ID!]
  not: IdFilterInput
  eq: ID
  ne: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID!]
  notIn: [ID!]
  between: [ID!]
}

input InitializeCodeGenInput {
  codeSystemId: ID!
  itemId: ID!

  """Default number of FREECODES is 5"""
  freeCodeCount: Int = 5

  """Default number of RESETCODES is 5"""
  resetCodeCount: Int = 5
}

input InitializeOpenTokenCodeGenInput {
  oem_item_id: String!
  secret_key: String!
  starting_code: String!
  max_count: Int!
  used_count: Int!
}

enum InstanceStatusInput {
  ACTIVE
  INACTIVE
}

enum IntentsEnum {
  KEYCODE
  PAYMENT
  REFUND
  TWOXDAYS
  THREEXDAYS
  TENPLUSDAYS
  UNLOCK
  RESET
}

type Item {
  _id: ID!
  assetAccount: AssetAccount
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  triggers: [String!]!
  type: ActorTypes!
  actionScope: ActionScope!
  actorName: String!
  profile: String
  idType: ThingIDTypes!
  idString: String
  description: String!
  creationDate: DateTime!

  """Default ItemID is 'OVES'"""
  oemID: String!

  """
  oemItemID cannot be null.  It must be provided in a conformal format PROD+YYMM+000000
  """
  oemItemID: String!

  """Identified a seller, such as 'ANGAZA'."""
  sellerID: String!

  """
  This is seller designated ID, unique within range.  Cannot be null.  Default same as oemItemID
  """
  sellerItemID: String!
  itemSKU: ItemSKU!
  itemBatch: ItemBatch!
  itemFirmware: ItemFirmware!
  itemStock: ItemStock
  itemFleet: ItemFleet
  lifeCycle: String!
  codeGenerator: CodeGenerator
  openTokencodeGen: OpenTokenCodeGen
  openTokenCodeDecoder: OpenTokenCodeDecoder
  codeGenUsed: CodeGenUsed
  legacyItemId: Float
  agent: Agent
  code: String
}

type ItemBatch {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  triggers: [String!]!
  type: ActorTypes!
  actionScope: ActionScope!
  actorName: String!
  profile: String

  """batchNumber has a pattern of ProductClassBases+YYMM+123456"""
  batchNumber: String!
  itemSKU: ItemSKU!
  batchDate: DateTime!

  """Please add description of batch!"""
  description: String!
  batchState: BatchState!
  eventMap: JSONObject
}

type ItemBatchConnection {
  edges: [ItemBatchEdge!]
  pageInfo: ItemBatchPageInfo
}

type ItemBatchEdge {
  cursor: String
  node: ItemBatch
}

type ItemBatchPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type ItemConnection {
  edges: [ItemEdge!]
  pageInfo: ItemPageInfo
}

input ItemDto {
  itemId: ID!
}

type ItemEdge {
  cursor: String
  node: Item
}

type ItemEvent {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  actor: Actor!
  action: Action!
  time: DateTime!
  eventLocation: Location!
  signal: Signal
  status: ProcessStatusTypes!
  type: ItemEventTypes!
  description: String!
  total: Int
  processed: Int
  lastProcessedId: String
}

type ItemEventConnection {
  edges: [ItemEventEdge!]
  pageInfo: ItemEventPageInfo
}

type ItemEventEdge {
  cursor: String
  node: ItemEvent
}

type ItemEventPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

enum ItemEventTypes {
  INITIALIZATION
  BATCH_CODE
  PROVISION
  BATCH_ITEM_CREATION
  ITEMS_REASSIGNMENT
  FLEET_ASSIGNMENT
  BATCH_FACTORY_EXPORT
  MESSAGE_FROM_MESSAGE_TEMPLATE
}

type ItemFirmware {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  triggers: [String!]!
  type: ActorTypes!
  actionScope: ActionScope!
  actorName: String!
  profile: String

  """Version Numbers are controlled by OVES Production."""
  version: String!
  codeSystem: CodeSystemType!
  description: String
}

type ItemFirmwareConnection {
  edges: [ItemFirmwareEdge!]
  pageInfo: ItemFirmwarePageInfo
}

type ItemFirmwareEdge {
  cursor: String
  node: ItemFirmware
}

type ItemFirmwarePageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type ItemFleet {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  triggers: [String!]!
  type: ActorTypes!
  actionScope: ActionScope!
  actorName: String!
  profile: String
  fleetName: String!
  assignDate: DateTime!
  description: String!
  itemList: [Item!]
  distributor: Distributor

  """Default number of FREECODES is 5"""
  freeCodeCount: Int
  disableFreeCode: Boolean

  """Default number of RESETCODES is 5"""
  resetCodeCount: Int
  disableResetCodeCount: Boolean

  """Number of code events allowed for an item within 24 hours."""
  dayCodeCountLimit: Int
  disableDayCodeCountLimit: Boolean

  """
  Total number of code events allowed for an item. Default is approximately 3 years (1096 events).
  """
  totalCodeCountLimit: Int
  disableTotalCodeCountLimit: Boolean

  """
  Minimum time (in milliseconds) between two subsequent code events for an item. Default is 1 minute.
  """
  codeGenInterval: Int
  disableCodeGenInterval: Boolean

  """
  Maximum number of days code that an item can have in a given period. Default is 60
  """
  maxCreditStackDays: Int
  disableMaxCreditStackDays: Boolean

  """
  `n` number of code event used to calculate the credit stackings. Default is 5
  """
  maxCreditStackCodeEvents: Int
  disableMaxCreditStackCodeEvents: Boolean

  """Number of days to check duration of day codes"""
  daysToCheckDuration: Int
  disableDaysToCheckDuration: Boolean

  """Minimum number of day codes generated in a specified duration"""
  minimumDayCodesGenerated: Int
  disableMinimumDayCodesGenerated: Boolean
}

type ItemFleetConnection {
  edges: [ItemFleetEdge!]
  pageInfo: ItemFleetPageInfo
}

type ItemFleetEdge {
  cursor: String
  node: ItemFleet
}

type ItemFleetPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type ItemPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type ItemSKU {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  triggers: [String!]!
  type: ActorTypes!
  actionScope: ActionScope!
  actorName: String!
  profile: String
  skuName: String!

  """Product Base are 4-letter string constant defined by OVES Production."""
  productBase: String
  mainMediaURL: String
  properties: GATT
  oemDescription: String
  distributor: Distributor
  supplier: Supplier
}

type ItemSKUConnection {
  edges: [ItemSKUEdge!]
  pageInfo: ItemSKUPageInfo
}

type ItemSKUEdge {
  cursor: String
  node: ItemSKU
}

type ItemSKUPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type ItemStock implements BaseEntity {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  stockName: String!
  locator: String
  stockCosts: Float
  batchSKU: ItemSKU!
  quantity: Int
  itemList: [Item!]!
}

type ItemStockConnection {
  edges: [ItemStockEdge!]
  pageInfo: ItemStockPageInfo
}

type ItemStockEdge {
  cursor: String
  node: ItemStock
}

type ItemStockPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

enum LifeCycle {
  INITIATED
  PRODUCED
  ASSIGNED
  SHIPPED
  INSTALLED
  RETURNED
  RECYCLED
}

type Location {
  placeName: String!
  latitude: Float!
  longitude: Float!
}

input LocationFilterInput {
  placeName: String
  latitude: FloatFilterInput
  longitude: FloatFilterInput
}

input LocationInputDto {
  placeName: String! = "A Place."
  latitude: Float!
  longitude: Float!
}

type LoginUsers {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  type: String!
  actionScope: String!
  name: String!
  profile: String!
  idType: String!
  idString: String!
  firstName: String!
  lastName: String!
  birthDate: DateTime!
  email: String!
  role: Roles
  roleName: String!
  authenticationInstance: AuthenticationInstance!
  refreshToken: RefreshToken
  activeSubRolePermission: PermissionInput!
}

type LoginUsersConnection {
  edges: [LoginUsersEdge!]
  pageInfo: LoginUsersPageInfo
}

type LoginUsersEdge {
  cursor: String
  node: LoginUsers
}

type LoginUsersPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

input MakeAuthSubInstanceActiveInput {
  authSubInstanceId: ID!
  distributorId: ID!
}

enum MessageCourierEnum {
  TELERIVET
  LIPAY
}

type MessageGroup {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  description: String!
  personIds: [String!]
  distributor: Distributor!
  eventId: String
  eventTemplateMap: JSONObject
  persons(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllPersonsResponse!
}

type MessageGroupConnection {
  edges: [MessageGroupEdge!]
  pageInfo: MessageGroupPageInfo
}

type MessageGroupEdge {
  cursor: String
  node: MessageGroup
}

type MessageGroupPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type MessageTemplate {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  messageBody: String!
  description: String
  intent: IntentsEnum!
  distributor: Distributor
  messageCourier: MessageCourierEnum
}

type MessageTemplateConnection {
  edges: [MessageTemplateEdge!]
  pageInfo: MessageTemplatePageInfo
}

type MessageTemplateEdge {
  cursor: String
  node: MessageTemplate
}

type MessageTemplatePageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

input MicroserviceGetClientExclusiveServiceInput {
  clientExclusiveServiceId: ID!
  email: String!
  role: String!
}

input MicroserviceGetClientExclusiveServicePermissionInput {
  name: String!
  instanceId: ID!
  distributorId: ID!
}

type Mutation {
  uploadAssetAccountsDockerStandalone(file: Upload!): String!
  assignAssetAccountToAgentByDistributorStaff(assignAssetAccountToAgentByDistributorStaffInput: AssignAssetAccountToAgentInput!): Success!
  removeAssetAccountFromAgentByDistributorStaff(removeAssetAccountFromAgentByDistributorStaffInput: AssignAssetAccountToAgentInput!): Success!
  setAssetAccountStatusToPayPlanCompleted(assetAccountId: ID!): Success!
  payToCode(payToCodegeneratorInput: PayToCodeInput!): Pay2CodeResponse!
  closeAssetAccount(assetAccountId: ID!): Success!
  setCreditAccountBalance(balance: Float!, assetAccountId: ID!): Success!
  assignPaymentPlanToAssetAccount(payPlanId: ID!, assetAccountId: ID!): Success!
  activateCreditAccount(assetAccountId: ID!): Success!
  activateAssetAccount(assetAccountId: ID!): Success!
  resolveCreditAccount(assetAccountId: ID!): Success!
  freezeCreditAccount(assetAccountId: ID!): Success!
  suspendCreditAccount(assetAccountId: ID!): Success!
  createAssetAccounts(assetAccountListInput: AssetAccountListInput!): [AssetAccount!]!
  uploadAssetAccountFromCSVURL(uploadAssetAccountFromCSVURLInput: uploadAssetAccountFromCSVURLInput!): String!
  pairAssetAccount(pairAssetAccountInput: PairAssetAccountInput!): AssetAccount!
  assignCreditAccountToCustomer(assetAccountId: ID!, customerId: ID!, managerId: ID!): AssetAccount!
  updateAssetAccount(updateAssetAccountInput: UpdateAssetAccountInput!): AssetAccount!
  creditCreditAccount(assetAccountId: ID!, paymentInput: PaymentInput!): AssetAccount!
  debitCreditAccount(assetAccountId: ID!, paymentInput: PaymentInput!): AssetAccount!
  uploadPayPlansDockerStandalone(file: Upload!): String!
  createPayPlan(createPayPlanTemplateInput: CreatePayPlanInput!): PayPlanTemplate!
  updatePayPlan(updatePayPlanTemplateInput: UpdatePayPlanInput!): PayPlanTemplate!
  deletePayPlan(payPlanTemplateId: String!): String!
  deleteMessageGroup(id: ID!): String!
  createMessageGroup(input: CreateMessageGroupInput!): MessageGroup!
  createMessageGroupByCustomerSearchQuery(input: CreateMessageGroupInput!): MessageGroup!
  createMessageGroupByAssetAccountSearchQuery(input: CreateMessageGroupInput!): MessageGroup!
  updateMessageGroup(id: String!, input: UpdateMessageGroupInput!): MessageGroup!
  createMessageFromTemplate(input: CreateMessageFromTemplateInput!): String!
  deleteMessageTemplate(id: ID!): String!
  createMessageTemplate(input: CreateMessageTemplateInput!): MessageTemplate!
  updateMessageTemplate(id: String!, input: UpdateMessageTemplateInput!): MessageTemplate!
  deleteLoginUser(userId: String!): Success!
  generateUserRoleSignUpToken(generateUserRoleSignUpTokenInput: GenerateUserRoleSignUpTokenInput!): Success!
  updateLoginUser(updateLoginUserInput: UpdateLoginUserInput!): LoginUsers!
  updateLoginUserPassword(updateLoginUserPasswordInput: UpdateUserPasswordInput!): Success!
  assignRoleToUser(assignRoleToUserInput: AssignRoleToUserInput!): LoginUsers!
  uploadRolesDockerStandalone(file: Upload!): String!
  createRole(createRoleInput: CreateRoleInput!): Roles!
  updateRole(updateRoleInput: UpdateRoleInput!): Roles!
  deleteRole(roleId: String!): Success!
  createSubRole(createSubRoleInput: CreateSubRoleInput!): SubRoles!
  updateSubRole(updateSubRoleInput: UpdateSubRoleInput!): SubRoles!
  deleteSubRole(subroleId: String!): Success!
  createPermission(createPermissionInput: CreatePermissionInput!): Success!
  updatePermission(updatePermissionInput: UpdatePermissionInput!): Permissions!
  deletePermission(permissionId: String!): Success!
  uploadAuthenticationInstanceDockerStandalone(file: Upload!): String!
  createAuthenticationInstance(createInstanceInput: CreateAuthenticationInstanceInput!): AuthenticationInstance!
  updateAuthenticationInstance(updateAuthenticationInstanceInput: UpdateAuthenticationInstanceInput!): AuthenticationInstance!
  deleteAuthenticationInstance(instanceId: String!): Success!
  changeLoginUserAuthenticationInstance(changeLoginUserAuthenticationInstanceInput: ChangeLoginUserAuthenticationInstanceInput!): Success!
  createAuthenticationSubInstance(createSubInstanceInput: CreateAuthenticationSubInstanceInput!): AuthenticationSubInstance!
  makeAuthenticationSubInstanceActive(makeAuthSubInstanceActiveInput: MakeAuthSubInstanceActiveInput!): Success!
  updateAuthenticationSubInstance(updateAuthenticationSubInstanceInput: UpdateAuthenticationSubInstanceInput!): AuthenticationSubInstance!
  deleteAuthenticationSubInstance(instanceId: String!): Success!
  uploadRolesPermissionsDockerStandalone(file: Upload!): String!
  assignPermissionToRole(assignPermissionToRoleInput: AssignPermissionToRoleInput!): Success!
  updateAssignedPermissionToRole(updateAssignedPermissionToRoleInput: UpdateAssignedPermissionToRoleInput!): Permissions!
  deleteRolePermission(rolePermissionId: String!): Success!
  assignPermissionsToAgent(assignPermissionToAgentInput: AssignPermissionToSubRoleInput!): Success!
  deletePermissionsFromAgent(deletePermissionFromAgentInput: AssignPermissionToSubRoleInput!): Success!
  deleteSubRolePermission(subRolePermissionId: String!): Success!
  assignClientExclusiveServicePermissions(assignClientExclusiveServicePermissionToClientExclusiveServiceInput: AssignClientExclusiveServicePermissionToClientExclusiveServiceInput!): Success!
  deleteClientExclusiveServicePermissions(ClientExclusiveServicePermissionsId: String!): String!
  signUpUser(signUpCredentials: SignUpCredentialsDto!): AuthToken!
  signInUser(signInCredentials: SignInCredentialsDto!): AuthToken!
  refreshAccessToken(refreshToken: String!): AuthToken!
  resetOvesUserPassword(resetLoginUserPasswordInput: ResetLoginUserPasswordInput!): Success!
  checkOvesUserEmailForResetPassword(email: String!): Success!
  distributorStaffRegisterAgent(distributorStaffRegisterAgentInput: DistributorStaffRegisterAgentInput!): String!
  updateAgent(updateAgentInput: UpdateAgentInput!): Agent!
  deleteAgent(agentId: ID!): String!
  createOrganization(createOrganizationInput: CreateOrganizationInput!): Organization!
  updateOrganization(updateOrganizationInput: UpdateOrganizationInput!): Organization!
  deleteOrganization(organizationId: String!): String!
  uploadDistributorDetailsDockerStandalone(file: Upload!): String!
  updateDistributorSetting(updateDistributorSettingInput: UpdateDistributorSettingInput!): DistributorSetting!
  adminRegisterDistributor(adminRegisterDistributor: AdminRegisterDistributorInput!): Distributor!
  getDistributorToken(adminRegisterDistributor: AdminRegisterDistributorInput!): String!
  updateDistributor(updateDistributorInput: UpdateDistributorInput!): Distributor!
  generateDistributorMQTTPassword(distributorId: ID!): Distributor!
  deleteDistributor(distributorId: String!): String!
  distributorRegisterDistributorStaff(distributorRegisterDistributorStaffInput: DistributorRegisterDistributorStaffInput!): String!
  updateDistributorStaff(updateDistributorStaffInput: UpdateDistributorStaffInput!): DistributorStaff!
  deleteDistributorStaff(distributorStaffId: ID!): String!
  createSupplier(createSupplierInput: CreateSupplierInput!): Supplier!
  updateSupplier(updateSupplierInput: UpdateSupplierInput!): Supplier!
  deleteSupplier(supplierId: String!): String!
  adminRegisterServicer(adminRegisterServicer: AdminRegisterServicerInput!): Servicer!
  updateServicer(updateServicerInput: UpdateServicerInput!): Servicer!
  deleteServicer(servicerId: String!): String!
  uploadCustomerDetailsDockerStandalone(file: Upload!): String!
  assignCustomerToAgent(assignCustomerToAgentInput: AssignCustomerToAgentInput!): Success!
  removeCustomerFromAgent(removeCustomerFromAgentInput: RemoveCustomerFromAgentInput!): Success!
  clientRegisterCustomer(clientCustomerInput: ClientRegisterPersonInput!): Person!
  updatePerson(updateClientPersonInput: UpdateClientPersonInput!): Person!
  deletePerson(personId: ID!): String!
  assignDistributorClientExclusiveServiceType(assignDistributorClientExclusiveServiceTypeInput: AssignDistributorClientExclusiveServiceTypeInput!): ClientExclusiveService!
  updateClientExclusiveService(updateClientExclusiveServiceInput: UpdateClientExclusiveServiceInput!): ClientExclusiveService!
  deleteClientExclusiveService(clientExclusiveServiceId: String!): String!
  signUpDistributorStaff(signUpDistributorStaffInput: SignUpDistributorStaffOrAgentInput!): User!
  signUpAgent(signUpAgentInput: SignUpDistributorStaffOrAgentInput!): User!
  signUpClient(signUpClientInput: SignUpClientInput!): User!
  signInClient(signInCredentialsInput: SignInCredentialsInput!): AccessToken!
  refreshClientAccessToken(refreshToken: String!): AccessToken!
  resetDistributorPassword(resetDistributorPasswordInput: ResetDistributorPasswordInput!): Success!
  checkDistributorEmailForResetPassword(email: String!): Success!
  logEvent(createEventInput: CreateEventInput!): Event!
  updateEvent(updateEventInput: UpdateEventInput!): Event!
  deleteEvent(EventId: String!): String!
  emitSignal(signalId: ID!): String!
  assignPublisherToSignal(signalId: ID!, publisherId: ID!): Signal!
  createSignal(createSignalInput: CreateSignalInput!): Signal!
  updateSignal(updateSignalInput: UpdateSignalInput!): Signal!
  deleteSignal(SignalId: String!): String!
  archiveSignalClassByTimeStamp(start: DateTime, end: DateTime): String!
  restoreSignalClassWithTimeStamp(start: DateTime, end: DateTime): String!
  createBroker(createBrokerInput: CreateMQTTBrokerInput!): Broker!
  updateBroker(updateBrokerInput: UpdateBrokerInput!): Broker!
  deleteBroker(BrokerId: String!): String!
  logPublisher(createPublisherInput: CreatePublisherInput!): Publisher!
  updatePublisher(updatePublisherInput: UpdatePublisherInput!): Publisher!
  deletePublisher(publisherId: String!): String!
  createDistributorTIGStackSubDomain(createDistributorTIGStackSubDomainInput: CreateDistributorTIGStackSubDomainInput!): CreateDistributorTIGStackSubDomainResponse!
  createItemEvent(createItemEventInput: CreateItemEventInput!): ItemEvent!
  updateItemEvent(updateItemEventInput: UpdateItemEventInput!): ItemEvent!
  uploadCodeEventsDockerStandalone(file: Upload!): String!
  copyLegacyCodeEventParametersInBulk(copyLegacyCodeEventParametersInBulkInput: CopyLegacyCodeEventParametersInBulkInput!): BulkCopyCodeEventsResponse!
  copyLegacyCodeEventParameters(copyLegacyCodeEventParametersInput: CopyLegacyCodeEventParametersInput!): CodeEvent!
  reverseCodeEventByDate(reverseCodeEventByDateInput: ReverseCodeEventByDateInput!): String!
  reverseCodeEvent(reverseCodeEventInput: ReverseCodeEventInput!): String!
  generateDaysCode(generateDaysCodeInput: GenerateDaysCodeInput!): CodeResponse!
  generateFreeCode(generateFreeCodeInput: GenerateCodeInput!): CodeResponse!
  generateResetCode(generateResetCodeInput: GenerateCodeInput!): CodeResponse!
  deleteCodeEvent(CodeEventId: String!): String!
  initializeCodeGen(initializeCodeGenInput: InitializeCodeGenInput!): CodeGenerator!
  batchCode(batchCodeInput: BatchCodeInput!): BatchCodeResponse!
  copyLegacyCodeGenParameters(copyLegacyCodeGenParametersInput: CopyLegacyCodeGenParametersInput!): CodeGenerator!
  updateCodeGenState(updateCodeGenStateInput: UpdateCodeGenStateInput!): UpdateCodeGenStateResponse!
  distributorIncreaseResetCodeCountForItem(itemId: ID!, resetCodeCount: Int!): CodeGenerator!
  distributorIncreaseFreeCodeCountForItem(itemId: ID!, freeCodeCount: Int!): CodeGenerator!
  updateCodeGenHashTop(updateCodeGenHashTopInBulkInput: UpdateCodeGenHashTopInBulkInput!): BulkUpdateCodeGenHashTopResponse!
  updateLegacyCodeGenParameters(updateLegacyCodeGenParametersInput: BulkUpdateLegacyCodeGenParametersInput!): BulkUpdateLegacyCodeGenParametersResponse!
  deleteCodeGenerator(CodeGenId: String!): String!
  updateSellerId(input: UpdateSellerIdInputDTO!): String!
  uploadItemsDockerStandalone(file: Upload!): String!
  initializeOpenTokenCodeGen(initializeOpenTokenCodeGenInput: InitializeOpenTokenCodeGenInput!): Item!
  initializeOpenTokenCodeDecoder(initializeOpenTokenCodeGenInput: InitializeOpenTokenCodeGenInput!): Item!
  updateTokenData(updateTokenDataInput: UpdateTokenDataInput!): Item!
  updateOpenTokenDecoder(updateOpenTokenDecoderInput: UpdateOpenTokenDecoderInput!): Item!
  deductDeviceCalenderDays(deductDeviceCalenderDaysInput: DeductDeviceCalenderDaysInput!): Item!
  createItem(createItemInput: CreateItemInput!): Item!
  createSingleItem(createItemInput: CreateItemInput!): Item!
  createItemsFromSellerIds(sellerItemIds: NumbersInput!): Boolean!
  batchInitialize(batchInitializeInput: BatchInitializeInput!): Item!
  createItemsInBulk(createItemBulkInput: CreateItemsInBulkInput!): BulkCreateItemResponse!
  copyLegacyItemsAndProvisionItems(copyLegacyAndProvisionInput: CopyLegacyAndProvisionInput!): Item!
  assignCodeGeneratorToItem(assignCodeGeneratorToItemInput: AssignCodeGeneratorToItemInput!): Item!
  updateItem(updateItemInput: UpdateItemInput!): Item!
  assignItemToItemFleet(assignItemToItemFleetInput: AssignItemToItemFleetInput!): Item!
  unassignItemFromFleet(unassignItemFleetInput: UnassignItemFleetInput!): UnassignItemsFleetResponse!
  unassignItemsFromItemFleet(unassignItemsFleetInput: UnassignItemsFleetInput!): UnassignItemsFleetResponse!
  assignBulkItemToItemFleet(assignBulkItemToItemFleetInput: AssignBulkItemToItemFleetInput!): BulkAssignItemsToFleetResponse!
  removeItemFromAgent(removeItemFromAgentInput: AssignItemToAgentInput!): Success!
  assignItemToAgent(assignItemToAgentInput: AssignItemToAgentInput!): Success!
  deleteItem(itemId: String!): String!
  provisionBatch(provisionInput: ProvisionInput!): ProvisionResponse!
  provisionPartial(provisionPartialInput: ProvisionPartialInput!): ProvisionPartialResponse!
  uploadItemSKUsDockerStandalone(file: Upload!): String!
  createItemSKU(createItemSKUInput: CreateItemSKUInput!): ItemSKU!
  itemSKUGATTManipulation(itemSkuId: ID!, manipulate: Boolean!, attributesInput: AttributeDto!): ItemSKU!
  deleteGATTPropertiesFromItemSKU(itemSkuId: ID!, propValue: String!): ItemSKU!
  updateItemSKU(updateItemSKUInput: UpdateItemSKUInput!): ItemSKU!
  deleteItemSKU(itemSKUId: String!): String!
  createItemSKUsInBulk(file: Upload!): Boolean!
  uploadItemBatchesDockerStandalone(file: Upload!): String!
  createItemBatch(createItemBatchInput: CreateItemBatchInput!): ItemBatch!
  updateItemBatch(updateItemBatchInput: UpdateItemBatchInput!): ItemBatch!
  deleteItemBatch(itemBatchId: String!): String!
  uploadItemFirmwaresDockerStandalone(file: Upload!): String!
  createItemFirmware(createItemFirmwareInput: CreateItemFirmwareInput!): ItemFirmware!
  updateItemFirmware(updateItemFirmwareInput: UpdateItemFirmwareInput!): ItemFirmware!
  deleteItemFirmware(itemFirmwareId: String!): String!
  uploadItemStocksDockerStandalone(file: Upload!): String!
  createItemStock(createItemStockInput: CreateItemStockInput!): ItemStock!
  updateItemStock(updateItemStockInput: UpdateItemStockInput!): ItemStock!
  deleteItemStock(itemStockId: String!): String!
  createSubscriber(createSubscriberInput: CreateSubscriberInput!): Subscriber!
  updateSubscriber(updateSubscriberInput: UpdateSubscriberInput!): Subscriber!
  deleteSubscriber(subscriberId: String!): String!
  createThingBroker(createBrokerInput: CreateBrokerInput!): Broker!
  updateThingBroker(updateBrokerInput: UpdateBrokerInput!): Broker!
  deleteThingBroker(brokerId: String!): String!
  uploadCodeSystemsDockerStandalone(file: Upload!): String!
  updateAvatarByItemID(updateAvatarByItemID: UpdateAvatarByItemIDInput!): Avatar!
  activateAvatar(avatarId: String!): Avatar!
  deactivateAvatar(avatarId: String!): Avatar!
  createAvatar(createAvatarInput: CreateAvatarInput!): Avatar!
  updateAvatar(updateAvatarInput: UpdateAvatarInput!): Avatar!
  deleteAvatar(avatarId: String!): String!
  assignItemBatchToItemFleet(assignItemBatchToItemFleetInput: AssignItemBatchToItemFleetInput!): ItemFleet!
  reassignFleetItemsFromItemFleet(reassignBatchItemsFromItemFleetInput: ReassignFleetItemsFromItemFleetInput!): Success!
  reassignBatchItemsFromItemFleet(reassignBatchItemsFromItemFleetInput: ReassignBatchItemsFromItemFleetInput!): Success!
  reassignItemsFromItemFleet(reassignItemsFromItemFleetInput: ReassignItemsFromItemFleetInput!): Success!
  uploadItemFleetsDockerStandalone(file: Upload!): String!
  assignItemFleetToDistributor(itemFleetId: ID!, distributorId: ID!): ItemFleet!
  createItemFleet(createItemFleetInput: CreateItemFleetInput!): ItemFleet!
  updateItemFleetCodeGen(updateItemFleetCodeGenInput: UpdateItemFleetCodeGenInput!): ItemFleet!
  updateItemFleet(updateItemFleetInput: UpdateItemFleetInput!): ItemFleet!
  deleteItemFleet(itemFleetId: String!): String!
  sendSms(telephone: String!, message: String!): String!
}

input NumbersInput {
  numbers: [String!]!
}

type OpenTokenCodeDecoder {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime

  """A key needed to generate the current token"""
  secret_key: String

  """A string representing the used token"""
  token: String

  """The Type of Open Token Being used"""
  token_type: OpenTokenCodeType

  """How many days do the token represent"""
  token_value: Float

  """An example would be: This is the 5th token"""
  max_count: Float
  used_count: Float
  starting_code: String
  remaining_credit_days: Float
  payg_enabled: Boolean
  output_enabled: Boolean
  openTokenCodeHistory: [OpenTokenCodeEvent!]
}

type OpenTokenCodeEvent {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  triggers: [String!]!
  type: ActorTypes!
  actionScope: ActionScope!
  actorName: String!
  profile: String

  """The token that has been generated"""
  token: String
  token_type: OpenTokenCodeType!

  """Max Count"""
  max_count: Float
  code_history_type: OpenTokenCodeEventType

  """How many days do the token represent"""
  token_value: Float
  opentokencodeGen: OpenTokenCodeGen
  opentokencodeDecoder: OpenTokenCodeDecoder
}

enum OpenTokenCodeEventType {
  GENERATED_TOKEN
  ACCEPTED_TOKEN
}

type OpenTokenCodeGen {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime

  """A key needed to generate the current token"""
  secret_key: String

  """A string representing the current token"""
  token: String

  """The Type of Open Token Being used"""
  token_type: OpenTokenCodeType

  """How many days do the token represent"""
  token_value: Float

  """An example would be: This is the 5th token"""
  max_count: Float
  starting_code: String
  openTokenCodeHistory: [OpenTokenCodeEvent!]
}

enum OpenTokenCodeType {
  ADD_TIME
  SET_TIME
  DISABLE_PAYG
  COUNTER_SYNC
  INVALID
  ALREADY_USED
}

type Organization {
  _id: ID!
  authenticationSubInstance: AuthenticationSubInstance!
  subRolePermissions: SubRolePermissions!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  type: OrgTypes!
  name: String!
  description: String
  orgAddress: Address!
  orgContactPerson: Person
  orgProfile: String!
  authenticationInstance: AuthenticationInstance!
  activeSubRolePermission: PermissionInput!
  role: Roles!
}

type OrganizationConnection {
  edges: [OrganizationEdge!]
  pageInfo: OrganizationPageInfo
}

type OrganizationEdge {
  cursor: String
  node: Organization
}

type OrganizationPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

enum OrgTypes {
  SERVICER
  DISTRIBUTOR
  SUPPLIER
  INVESTOR
  FINANCIAL
  INSTITUTION
  GOVERNMENT
  SERVICE
}

type PageData {
  count: Int!
  limit: Int!
  offset: Int!
}

enum PaginationEnum {
  CURSOR
  OFFSET
}

input PairAssetAccountInput {
  clientId: ID!
  userId: ID!
  credit: CreditAccountDTO!
  itemId: ID!
  paySchedule: PaymentDTO
  paymentPlan: PayPlanBaseEntityDto
  meta: [AssetAccountMetaDto!]
}

type Pay2CodeResponse {
  codeType: String!
  codeHex: String!
  codeDec: String!
  totalAmountPaid: Float
  message: String!
  customer: JSONObject
}

type Payment {
  amount: Float!
  datetime: DateTime!
  instruction: String!
}

input PaymentDTO {
  amount: Float!
  datetime: DateTime!
  instruction: String!
}

input PaymentInput {
  action: AccountActions!
  datetime: DateTime!
  amount: Float!
  notes: String!
}

type PayPlanBaseEntity {
  """
  Default plan type is NO-PLAN, indicating manual payment and code generation
  """
  planName: String
  planDescription: String
  useUpfront: Boolean
  planDetails: [PlanDetail!]
}

input PayPlanBaseEntityDto {
  """
  Default plan type is NO-PLAN, indicating manual payment and code generation
  """
  planName: String = "NO-PLAN"
  planDescription: String
  useUpfront: Boolean
  planDetails: [PlanDetailDto!]
}

type PayPlanTemplate {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime

  """
  Default plan type is NO-PLAN, indicating manual payment and code generation
  """
  planName: String
  planDescription: String
  useUpfront: Boolean
  planDetails: [PlanDetail!]
}

type PayPlanTemplateConnection {
  edges: [PayPlanTemplateEdge!]
  pageInfo: PayPlanTemplatePageInfo
}

type PayPlanTemplateEdge {
  cursor: String
  node: PayPlanTemplate
}

type PayPlanTemplatePageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

input PayToCodeInput {
  sellerItemId: ID!
  amount: Float!
  message: String!
  transactionId: String!
  organizationType: String!
  senderAccountNumber: String!
  senderAccountName: String!
}

enum PermissionInput {
  NOT_APPLICABLE
  GET_ALL_CLIENT_EXCLUSIVE_SERVICE_PERMISSIONS
  GET_ALL_CLIENT_EXCLUSIVE_SERVICE_PERMISSIONS_FOR_CLIENT_EXCLUSIVE_PERMISSION
  GET_SPECIFIC_CLIENT_EXCLUSIVE_SERVICE_PERMISSIONS
  ASSIGN_CLIENT_EXCLUSIVE_SERVICE_PERMISSIONS
  DELETE_CLIENT_EXCLUSIVE_SERVICE_PERMISSIONS
  CREATE_ROLE
  DELETE_ROLE
  UPDATE_ROLE
  GET_ALL_ROLES
  GET_SPECIFIC_ROLE
  ASSIGN_ROLE_TO_USER
  UPDATE_ASSIGNED_PERMISSION_TO_ROLE
  DELETE_ROLE_PERMISSION
  GET_SPECIFIC_ROLE_PERMISSION_BY_PERMISSION_NAME
  UPLOAD_ROLE_PERMISSIONS_DOCKER_STANDALONE
  DOWNLOAD_CLIENT_CREDS
  UPLOAD_ROLES_DOCKER_STANDALONE
  CREATE_SUBROLE
  DELETE_SUBROLE
  UPDATE_SUBROLE
  GET_ALL_SUBROLES
  GET_SPECIFIC_SUBROLE
  ASSIGN_SUBROLE_TO_ROLE
  GET_SUBROLES_FOR_LOGINUSER_ROLE
  GET_PERMISSIONS_FOR_SUBROLE
  GET_SPECIFIC_OVESADMIN
  GET_ALL_OVESADMINS
  DELETE_OVES_ADMIN
  GENERATE_ROLE_USER_SIGN_UP_TOKEN
  UPDATE_OVES_ADMIN
  UPDATE_OVES_ADMIN_PASSWORD
  RESET_OVES_PERSONEL_PASSWORD
  CHECK_OVES_PERSONEL_EMAIL_FOR_RESET_PASSWORD
  CREATE_LOGIN_USER
  DELETE_LOGIN_USER
  UPDATE_LOGIN_USER
  GET_ALL_LOGIN_USERS
  GET_SPECIFIC_LOGIN_USER
  GENERATE_USER_ROLE_SIGNUP_TOKEN
  GENERATE_LOGIN_USER_SUBROLE_SIGNUP_TOKEN
  GET_ALL_SUBROLE_LOGINUSERS_FOR_ROLE_LOGINUSER
  CHANGE_SUBROLE_LOGIN_USER_SUBROLE
  CHANGE_ROLE_LOGIN_USER_ASSIGN_PERMISSION_STATUS
  UPDATE_LOGINUSER_PASSWORD
  CREATE_PERMISSION
  GET_ALL_PERMISSIONS
  GET_SPECIFIC_PERMISSION
  ASSIGN_PERMISSION_TO_ROLE
  ASSIGN_ROLE_PERMISSIONS_TO_SUBROLE
  ASSIGN_DEFAULT_LOGINUSER_PERMISSIONS_TO_SUBROLE
  CREATE_MULTIPLE_SUBINSTANCES_UNDER_INSTANCE
  GET_SPECIFIC_ROLE_PERMISSIONS
  DELETE_SUBROLE_PERMISSIONS
  DELETE_PERMISSION
  UPDATE_PERMISSION
  UPDATE_ASSIGNED_ROLE_PERMISSIONS_TO_SUBROLE
  ADMIN_ASSIGN_PERMISSION_TO_SUBROLE
  GET_ALL_PERMISSIONS_FOR_AGENT
  ASSIGN_PERMISSIONS_TO_AGENT
  DELETE_PERMISSIONS_FROM_AGENT
  GET_SPECIFIC_SUBROLE_PERMISSIONS_BY_PERMISSION_NAME
  CREATE_AUTHENTICATION_INSTANCE
  DELETE_AUTHENTICATION_INSTANCE
  UPDATE_AUTHENTICATION_INSTANCE
  GET_ALL_AUTHENTICATION_INSTANCE
  GET_SPECIFIC_AUTHENTICATION_INSTANCE
  MAKE_AUTHENTICATION_INSTANCE_ACTIVE
  CHANGE_LOGIN_USER_AUTHENTICATION_INSTANCE
  UPLOAD_AUTHENTICATION_INSTANCE_DOCKER_STANDALONE
  CREATE_AUTHENTICATION_SUBINSTANCE
  UPDATE_AUTHENTICATION_SUBINSTANCE
  DELETE_AUTHENTICATION_SUBINSTANCE
  GET_ALL_AUTHENTICATION_SUBINSTANCE
  GET_SPECIFIC_AUTHENTICATION_SUBINSTANCE
  MAKE_AUTHENTICATION_SUBINSTANCE_ACTIVE
  DEFAULT_PERMISSIONS
  GET_SPECIFIC_OVES_ADMIN
  GET_ALL_OVES_ADMINS
  THING_SERVICE_ITEMS_BY_OEMITEMID
  GET_ALL_ADDRESSES
  GET_SPECIFIC_ADDRESS
  CREATE_ADDRESS
  UPDATE_ADDRESS
  DELETE_ADDRESS
  GET_ALL_ARTICLES
  GET_ALL_SPECIFIC_ARTICLE
  CREATE_ARTICLE
  UPDATE_ARTICLE
  DELETE_ARTICLE
  GET_ALL_AVATARS
  UPDATE_AVATAR_BY_ITEM_ID
  GET_SPECIFIC_AVATAR
  GET_SPECIFIC_AVATAR_FOR_ITEM
  CREATE_AVATAR
  UPDATE_AVATAR
  DELETE_AVATAR
  ACTIVATE_AVATAR
  DEACTIVATE_AVATAR
  GET_ALL_CODE_EVENTS
  GET_SPECIFIC_CODE_EVENT
  GENERATE_CODEGENERATOR
  DELETE_CODEEVENT
  GENERATE_DAYSCODE
  GENERATE_FREESCODE
  GENERATE_RESETCODE
  COPY_LEGACY_CODEEVENT_PARAMETERS
  COPY_LEGACY_CODEGEN_PARAMETERS
  UPLOAD_CODE_EVENTS_DOCKER_STANDALONE
  LOAD_CODE_EVENTS_DATA_TO_ELASTIC_SEARCH
  COPY_LEGACY_CODEEVENT_PARAMETERS_IN_BULK
  GET_ALL_CODE_EVENTS_FOR_SPECIFIC_ITEM_BY_DISTRIBUTOR
  GET_CODE_EVENT_BY_CODEGENERATORIDS
  GET_ALL_CODEGENERATORS
  GET_SPECIFIC_CODEGENERATOR
  INITIALIZE_CODEGENERATOR
  DELETE_CODEGENERATOR
  UPLOAD_CODE_GENS_DOCKER_STANDALONE
  DOWNLOAD_DISTRIBUTOR_CODE_GENS
  LOAD_CODE_GENS_DATA_TO_ELASTIC_SEARCH
  UPDATE_CODEGENERATOR_HASHTOP
  DISTRIBUTOR_INCREASE_RESETCODE_COUNT_FOR_ITEM
  DISTRIBUTOR_INCREASE_FREECODE_COUNT_FOR_ITEM
  GET_ALL_CODE_SYSTEMS
  GET_SPECIFIC_CODE_SYSTEM
  UPLOAD_CODE_SYSTEMS_DOCKER_STANDALONE
  LOAD_CODE_SYSTEMS_DATA_TO_ELASTIC_SEARCH
  GET_ALL_DISPATCHERS
  GET_SPECIFIC_DISPATCHER
  CREATE_DISPATCHER
  UPDATE_DISPATCHER
  DELETE_DISPATCHER
  GET_ALL_EVENTS
  GET_SPECIFIC_EVENT
  CREATE_EVENT
  UPDATE_EVENT
  DELETE_EVENT
  LOG_EVENT
  VIEW_EVENT
  GET_ALL_ITEM_EVENTS
  CREATE_ITEM_EVENT
  UPDATE_ITEM_EVENT
  BATCHCODE
  PROVISION_BATCH
  PROVISION_PARTIAL
  BATCH_FACTORY_PARTIAL_EXPORT
  BATCH_FACTORY_EXPORT
  UPDATE_CODE_GEN_STATE
  UNASSIGN_ITEM_FROM_ITEM_FLEET
  UNASSIGN_ITEM_FROM_FLEET
  BATCH_INITIALIZE
  UPDATE_ITEM_FLEET_CODE_GEN
  REASSIGN_FLEET_ITEMS_FROM_FLEET
  GET_ALL_AGENT_ITEMS
  ASSIGN_ITEM_TO_AGENT
  REMOVE_ITEM_FROM_AGENT
  GET_ALL_ITEMS
  GET_ALL_ITEMS_FOR_ITEMBATCH_IN_DESCENDING_ORDER
  GET_SPECIFIC_ITEM
  CREATE_ITEM
  CREATE_SINGLE_ITEM
  ASSIGN_CODEGENERATOR_TO_ITEM
  UPDATE_ITEM
  ASSIGN_ITEM_TO_ITEMFLEET
  DELETE_ITEM
  GET_ALL_CLIENT_ITEMS
  COPY_LEGACY_ITEMS_AND_PROVISION_ITEMS
  TRACK_BULK_CREATE_ITEMS
  CREATE_ITEMS_IN_BULK
  ASSIGN_BULK_ITEMS_TO_ITEMFLEET
  UPDATE_LEGACY_CODEGEN_PARAMETERS
  UPLOAD_ITEMS_DOCKER_STANDALONE
  DOWNLOAD_DISTRIBUTOR_ITEMS
  LOAD_ITEMS_DATA_TO_ELASTIC_SEARCH
  GET_ALL_ITEMBATCHES
  GET_SPECIFIC_ITEMBATCH
  CREATE_ITEMBATCH
  UPDATE_ITEMBATCH
  DELETE_ITEMBATCH
  UPLOAD_ITEM_BATCHES_DOCKER_STANDALONE
  LOAD_ITEM_BATCHES_DATA_TO_ELASTIC_SEARCH
  GET_ALL_ITEMFIRMWARES
  GET_SPECIFIC_ITEMFIRMWARE
  CREATE_ITEMFIRMWARE
  UPDATE_ITEMFIRMWARE
  DELETE_ITEMFIRMWARE
  UPLOAD_ITEM_FIRMWARES_DOCKER_STANDALONE
  GET_ALL_ITEMFLEETS
  GET_SPECIFIC_ITEMFLEET
  CREATE_ITEMFLEET
  UPDATE_ITEMFLEET
  DELETE_ITEMFLEET
  ASSIGN_ITEMBATCH_TO_ITEMFLEET
  GET_ALL_CLIENT_ITEMS_IN_ITEMFLEET
  GET_SPECIFIC_CLIENT_ITEM_IN_ITEMFLEET
  GET_ITEMFLEETS_FOR_CLIENT
  ASSIGN_ITEMFLEET_TO_DISTRIBUTOR
  UPLOAD_ITEM_FLEETS_DOCKER_STANDALONE
  DOWNLOAD_DISTRIBUTOR_FLEET
  GET_ALL_ITEM_IN_ITEM_FLEETS
  GET_ALL_ITEMSKUS
  GET_SPECIFIC_ITEMSKU
  CREATE_ITEMSKU
  UPDATE_ITEMSKU
  DELETE_ITEMSKU
  CREATE_ITEMSKUS_IN_BULK
  ITEMSKU_GATT_MANIPULATION
  DELETE_GATT_PROPERTIES_FROM_ITEMSKU
  UPLOAD_ITEMSKUS_DOCKER_STANDALONE
  LOAD_ITEM_SKUS_DATA_TO_ELASTIC_SEARCH
  GET_ALL_ITEMSTOCKS
  GET_SPECIFIC_ITEMSTOCK
  CREATE_ITEMSTOCK
  UPDATE_ITEMSTOCK
  DELETE_ITEMSTOCK
  UPLOAD_ITEM_STOCKS_DOCKER_STANDALONE
  GET_ALL_MATERIALS
  GET_SPECIFIC_MATERIAL
  CREATE_MATERIAL
  UPDATE_MATERIAL
  DELETE_MATERIAL
  GET_ALL_MEDIA_METAS
  GET_SPECIFIC_MEDIA_META
  CREATE_MEDIA_META
  UPDATE_MEDIA_META
  DELETE_MEDIA_META
  GET_ALL_PACKS
  GET_SPECIFIC_PACK
  CREATE_PACK
  UPDATE_PACK
  DELETE_PACK
  GET_ALL_PARTS
  GET_SPECIFIC_PART
  CREATE_PART
  DELETE_PART
  UPDATE_PART
  GET_ALL_PLACES
  GET_SPECIFIC_PLACE
  CREATE_PLACE
  UPDATE_PLACE
  DELETE_PLACE
  GET_ALL_PRODUCTS
  GET_SPECIFIC_PRODUCT
  CREATE_PRODUCT
  UPDATE_PRODUCT
  DELETE_PRODUCT
  GET_ALL_ROUTES
  GET_SPECIFIC_ROUTE
  CREATE_ROUTE
  UPDATE_ROUTE
  DELETE_ROUTE
  GET_ALL_SHIPMENT
  GET_SPECIFIC_SHIPMENT
  CREATE_SHIPMENT
  UPDATE_SHIPMENT
  DELETE_SHIPMENT
  GET_ALL_THING_BROKERS
  GET_SPECIFIC_THING_BROKER
  CREATE_THING_BROKER
  UPDATE_THING_BROKER
  DELETE_THING_BROKER
  GET_ALL_SUBSCRIBERS
  GET_SPECIFIC_SUBSCRIBER
  CREATE_SUBSCRIBER
  UPDATE_SUBSCRIBER
  DELETE_SUBSCRIBER
  GET_SPECIFIC_BUYER
  GET_ALL_BUYERS
  DELETE_BUYER
  UPDATE_BUYER
  UPDATE_BUYER_PASSWORD
  GET_SPECIFIC_BRAND
  GET_ALL_BRANDS
  DELETE_BRAND
  UPDATE_BRAND
  CREATE_BRAND
  GET_SPECIFIC_CATEGORY
  GET_ALL_CATEGORIES
  DELETE_CATEGORY
  UPDATE_CATEGORY
  CREATE_CATEGORY
  GET_ALL_AMAZON_PRODUCT_CATEGORIES
  GET_SPECIFIC_AMAZON_PRODUCT_CATEGORY
  CREATE_AMAZON_PRODUCT_CATEGORY
  UPDATE_AMAZON_PRODUCT_CATEGORY
  DELETE_AMAZON_PRODUCT_CATEGORY
  GET_SPECIFIC_APPLICATION_SITE
  GET_ALL_APPLICATION_SITES
  DELETE_APPLICATION_SITE
  UPDATE_APPLICATION_SITE
  CREATE_APPLICATION_SITE
  GET_SPECIFIC_BRAND_SELECTOR
  GET_ALL_BRAND_SELECTOR_SELECTORS
  DELETE_BRAND_SELECTOR
  UPDATE_BRAND_SELECTOR
  CREATE_BRAND_SELECTOR
  GET_SPECIFIC_CATEGORY_SELECTOR
  GET_ALL_CATEGORY_SELECTOR_SELECTORS
  DELETE_CATEGORY_SELECTOR
  UPDATE_CATEGORY_SELECTOR
  CREATE_CATEGORY_SELECTOR
  GET_SPECIFIC_PRODUCT_SELECTOR
  GET_ALL_PRODUCT_SELECTOR_SELECTORS
  DELETE_PRODUCT_SELECTOR
  UPDATE_PRODUCT_SELECTOR
  CREATE_PRODUCT_SELECTOR
  UPLOAD_FILE
  GET_SPECIFIC_ECOMMERCE_PRODUCT
  GET_ALL_ECOMMERCE_PRODUCTS
  DELETE_ECOMMERCE_PRODUCT
  UPDATE_ECOMMERCE_PRODUCT
  CREATE_ECOMMERCE_PRODUCT
  GET_ECOMMERCE_PRODUCTS_BY_CATEGORY
  GET_SPECIFIC_VARIATION
  GET_ALL_VARIATIONS
  DELETE_VARIATION
  UPDATE_VARIATION
  CREATE_VARIATION
  GET_ALL_CLIENT_EXCLUSIVE_SERVICES
  GET_SPECIFIC_CLIENT_EXCLUSIVE_SERVICE
  ASSIGN_TO_SERVICER_DISTRIBUTOR_CLIENT_EXCLUSIVE_SERVICE_TYPE
  UPDATE_CLIENT_EXCLUSIVE_SERVICE
  DELETE_CLIENT_EXCLUSIVE_SERVICE
  GET_ALL_CLIENT_EXCLUSIVE_SERVICES_FOR_DISTRIBUTOR
  GET_ALL_CLIENT_EXCLUSIVE_SERVICES_FOR_SERVICER_GLOBAL
  GET_SPECIFIC_AGENT
  GET_ALL_AGENTS
  GET_ALL_AGENTS_FOR_DISTRIBUTOR
  ADMIN_GET_ALL_AGENTS_FOR_DISTRIBUTOR
  DELETE_AGENT
  CHANGE_AGENT_SUB_ROLE
  UPDATE_AGENT
  UPDATE_AGENT_PASSWORD
  GET_DISTRIBUTOR_TOKEN
  DISTRIBUTOR_STAFF_REGISTER_AGENT
  GET_ALL_AGENTS_FOR_SPECIFIC_DISTRIBUTOR_STAFF
  REASSIGN_ITEMS_FROM_ITEM_FLEET
  REASSIGN_BATCH_ITEMS_FROM_ITEM_FLEET
  RE_ASSIGN_ITEM_TO_ITEMFLEET
  GET_SPECIFIC_DISTRIBUTOR
  GET_ALL_DISTRIBUTORS
  DELETE_DISTRIBUTOR
  GENERATE_AGENT_SIGNUP_TOKEN
  UPDATE_DISTRIBUTOR
  UPDATE_DISTRIBUTOR_PASSWORD
  ADMIN_REGISTER_DISTRIBUTOR
  RESET_DISTRIBUTOR_PASSWORD
  CHECK_DISTRIBUTOR_EMAIL_FOR_RESET_PASSWORD
  GENERATE_DISTRIBUTOR_MQTT_PASSWORD
  DOWNLOAD_DISTRIBUTOR_DETAILS
  UPLOAD_DISTRIBUTOR_DETAILS_DOCKER_STANDALONE
  GET_SPECIFIC_DISTRIBUTOR_SETTING
  UPDATE_DISTRIBUTOR_SETTING
  GET_SPECIFIC_DISTRIBUTOR_STAFF
  GET_ALL_DISTRIBUTOR_STAFF
  DELETE_DISTRIBUTOR_STAFF
  UPDATE_DISTRIBUTOR_STAFF
  DISTRIBUTOR_REGISTER_DISTRIBUTOR_STAFF
  GET_ALL_DISTRIBUTOR_STAFF_FOR_SPECIFIC_DISTRIBUTOR
  GET_ALL_ORGANIZATIONS
  GET_SPECIFIC_ORGANIZATION
  CREATE_ORGANIZATION
  UPDATE_ORGANIZATION
  DELETE_ORGANIZATION
  GET_ALL_SERVICERS
  GET_SPECIFIC_SERVICER
  CREATE_SERVICER
  UPDATE_SERVICER
  DELETE_SERVICER
  ADMIN_REGISTER_SERVICER
  GET_ALL_SUPPLIERS
  GET_SPECIFIC_SUPPLIER
  CREATE_SUPPLIER
  UPDATE_SUPPLIER
  DELETE_SUPPLIER
  UPDATE_MESSAGE_GROUP
  CREATE_MESSAGE_GROUP
  DELETE_MESSAGE_GROUP
  GET_SPECIFIC_MESSAGE_GROUP
  GET_ALL_PERSONS
  GET_ALL_PERSONS_BY_IDS
  GET_SPECIFIC_CUSTOMER_OR_PERSON
  GET_ALL_CLIENT_CUSTOMERS
  CLIENT_REGISTER_CUSTOMER
  UPDATE_PERSON
  DELETE_PERSON
  ACCOUNTS_SERVICE_CUSTOMERS
  UPLOAD_CUSTOMER_DETAILS_DOCKER_STANDALONE
  ASSIGN_CUSTOMER_TO_AGENT
  REMOVE_CUSTOMER_FROM_AGENT
  GET_ALL_MESSAGES
  GET_SPECIFIC_MESSAGE
  CREATE_MESSAGE
  DELETE_MESSAGE
  UPDATE_MESSAGE
  GET_ALL_PUBLISHERS
  VIEW_PUBLISHER
  LOG_PUBLISHER
  UPDATE_PUBLISHER
  DELETE_PUBLISHER
  GET_ALL_SIGNALS
  GET_SPECIFIC_SIGNAL
  EMIT_SIGNAL
  ASSIGIN_PUBLISHER_TO_SIGNAL
  CREATE_SIGNAL
  UPDATE_SIGNAL
  DELETE_SIGNAL
  RESTORE_SIGNAL_CLASS_WITH_TIMESTAMP
  ARCHIVE_SIGNAL_CLASS_BY_TIMESTAMP
  GET_ALL_BROKERS
  GET_SPECIFIC_BROKER
  CREATE_BROKER
  UPDATE_BROKER
  DELETE_BROKER
  GET_ALL_ASSET_ACCOUNTS
  GET_SPECIFIC_ASSET_ACCOUNTS
  GET_SPECIFIC_ASSET_ACCOUNT_CREDIT_BALANCE
  SET_CREDIT_ACCOUNT_BALANCE_FOR_ASSET_ACCOUNT
  ACTIVATE_CREDIT_ACCOUNT
  RESOLVE_CREDIT_ACCOUNT
  FREEZE_CREDIT_ACCOUNT
  SUSPEND_CREDIT_ACCOUNT
  CREATE_ASSET_ACCOUNT
  CREDIT_CREDIT_ACCOUNT
  DEBIT_CREDIT_ACCOUNT
  ASSIGN_CREDIT_ACCOUNT_TO_CUSTOMER
  UPDATE_ASSET_ACCOUNT
  GET_ALL_ASSET_ACCOUNTS_FOR_CLIENT
  GET_ALL_ASSET_ACCOUNTS_FOR_CUSTOMER
  VIEW_ACTIVITIES_OF_ASSETACCOUNT
  SET_ASSETACCOUNT_STATUS_TO_PAYPLAN_COMPLETED
  ASSIGN_PAYMENT_PLAN_TO_ASSETACCOUNT
  ACTIVATE_ASSETACCOUNT
  PAIR_ASSETACCOUNT
  CLOSE_ASSETACCOUNT
  DOWNLOAD_CLIENT_ASSET_ACCOUNTS
  UPLOAD_ASSET_ACCOUNTS_DOCKER_STANDALONE
  ASSIGN_ASSET_ACCOUNT_TO_DISTRIBUTOR_STAFF_BY_DISTRIBUTOR
  GET_ALL_ASSET_ACCOUNTS_FOR_SPECIFIC_DISTRIBUTOR_STAFF
  GET_ALL_ASSET_ACCOUNTS_FOR_AGENT
  ASSIGN_ASSET_ACCOUNT_TO_AGENT_BY_DISTRIBUTOR_STAFF
  REMOVE_ASSET_ACCOUNT_FROM_AGENT_BY_DISTRIBUTOR_STAFF
  CREATE_ASSET_ACCOUNTS
  SEND_SMS
  REVERSE_CODE_EVENT
  GET_ALL_ASSET_ACCOUNTS_TEMP_DATA
  PAY_TO_CODE
  REVERSE_CODE_EVENT_BY_DATE
  GET_ALL_MESSAGE_TEMPLATES
  GET_SPECIFIC_MESSAGE_TEMPLATE
  DELETE_MESSAGE_TEMPLATE
  CREATE_MESSAGE_TEMPLATE
  UPDATE_MESSAGE_TEMPLATE
  CREATE_MESSAGE_GROUP_BY_CUSTOMER_SEARCH_QUERY
  CREATE_MESSAGE_GROUP_BY_ASSET_ACCOUNT_SEARCH_QUERY
  GET_ALL_PAYPLANS
  GET_ALL_PAY_PLAN_TEMPLATES
  GET_SPECIFIC_PAYPLAN_TEMPLATE
  GET_SPECIFIC_PAYPLAN
  CREATE_PAYPLAN
  UPDATE_PAYPLAN
  DELETE_PAYPLAN
  UPLOAD_PAY_PLANS_DOCKER_STANDALONE
  GET_ALL_UNPROCESSED_ITEM_EVENTS
}

type Permissions {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  name: PermissionInput!
}

type PermissionsConnection {
  edges: [PermissionsEdge!]
  pageInfo: PermissionsPageInfo
}

type PermissionsEdge {
  cursor: String
  node: Permissions
}

type PermissionsPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type Person {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  assetAccount: [AssetAccount!]
  creditAccount: CreditAccount
  type: PersonTypes!
  refreshClientToken: RefreshClientToken
  name: String!
  description: String
  contact: Contact!
  address: Address!
  distributor: Distributor
  agentId: ID
  servicer: Servicer
  supplier: Supplier
  organization: Organization
  gender: String
  details: [PersonDetail!]
}

enum PersonalIDTypes {
  PASSPORT
  OFFICIAL_ID
  DRIVERS_LICENSE
}

type PersonConnection {
  edges: [PersonEdge!]
  pageInfo: PersonPageInfo
}

input PersonContactDto {
  phone: String!
  email: String!
  social: String!
}

type PersonDetail {
  name: String
  value: String
}

input PersonDto {
  personId: ID!
}

type PersonEdge {
  cursor: String
  node: Person
}

type PersonPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

enum PersonTypes {
  LOGIN
  CUSTOMER
  AGENT
  EMPLOYEE
  CONTACT
  DEVELOPER
}

type PlanDetail {
  pName: String
  pValue: String
}

input PlanDetailDto {
  pName: String!
  pValue: String!
}

enum ProcessStatusTypes {
  COMPLETE
  STARTED
  ONGOING
  FAILED
}

type ProvisionDTOResponse {
  batchId: String!
  qid: String!
}

input ProvisionInput {
  batchId: String!
  qid: String!
}

type ProvisionPartialDTOResponse {
  itemId: String
  oemItemID: String
  sellerItemID: String
  hashTop: String
  hashRoot: String
  batchNumber: String
  skuName: String
}

input ProvisionPartialInput {
  oemItemIds: [String!]
  qid: String!
}

type ProvisionPartialResponse {
  itemsProvisioned: [ProvisionPartialDTOResponse!]!
  error: [String!]
}

type ProvisionResponse {
  itemsProvisioned: ProvisionDTOResponse!
  error: [String!]
}

type Publisher {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  topic: String!
  broker: Broker
}

type PublisherConnection {
  edges: [PublisherEdge!]
  pageInfo: PublisherPageInfo
}

type PublisherEdge {
  cursor: String
  node: Publisher
}

type PublisherPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type Query {
  downloadClientAssetAccounts(clientId: ID!): [CloudinaryDockerStandaloneResponse!]!
  getAllAssetAccountsForAgent(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    agentId: ID!
    search: String
  ): GetAllAssetAccountsResponse!
  getAllAssetAccounts(
    search: String
    filters: GetAllAssetAccountsInput

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllAssetAccountsResponse!
  getAllAssetAccountActivities(
    search: String
    query: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllAssetAccountsResponse!
  downloadAllAssetAccountActivities(search: String, query: String): [AssetAccount!]!
  getAllAssetAccountActivitiesCreditAmount(search: String, query: String): Float!
  getAllAssetAccountsForClient(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    clientId: ID
    search: String
    filters: GetAllAssetAccountsInput
  ): GetAllAssetAccountsResponse!
  thingServiceAssetAccounts(first: Int!, offset: Int!, clientId: ID!): [AssetAccount!]!
  thingServiceFindAssetAccount(itemId: ID!): AssetAccount
  getAllAssetAccountsForCustomer(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    clientId: ID!
    customerId: ID!
  ): GetAllAssetAccountsResponse!
  getSpecificAssetAccount(id: ID!): AssetAccount!
  getSpecificAssetAccountCreditBalance(assetAccountId: ID!): Int!
  viewActivitiesOfAssetAccount(assetAccountId: ID!): Int!
  getAllPayPlanTemplates(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllPayPlansResponse!
  getSpecificPayPlanTemplate(id: ID!): PayPlanTemplate
  getAllAssetAccountsTempData(
    search: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllAssetAccountsTempDataResponse!
  migrateItems(number: Float!): Boolean!
  getAllMessageGroups(
    search: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllMessageGroupResponse!
  getSpecificMessageGroup(id: ID!): MessageGroup!
  getAllMessageTemplates(
    search: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllMessageTemplateResponse!
  getSpecificMessageTemplate(id: ID!): MessageTemplate!
  getSpecificLoginUser(id: String!): LoginUsers!
  getAllLoginUsers(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllLoginUsersResponse!
  getAllRoles(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllRolesResponse!
  getSpecificRole(roleId: ID!): Roles!
  getAllSubRoles(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllSubRolesResponse!
  getSpecificSubRole(id: ID!): SubRoles!
  getAllPermissions(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllPermissionsResponse!
  getSpecificPermission(id: String!): Permissions!
  getAllAuthenticationInstances(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllAuthenticationInstancesResponse!
  getSpecificAuthenticationInstance(authInstanceId: ID!): AuthenticationInstance!
  getAllAuthenticationSubInstances(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllAuthenticationSubInstancesResponse!
  getSpecificAuthenticationSubInstance(id: String!): AuthenticationSubInstance!
  downloadClientCreds(roleId: String!): [CloudinaryDockerStandaloneResponse!]!
  getSpecificRolePermissions(
    getSpecificRolePermissionsInput: GetSpecificRolePermissionsInput!

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetSpecificRolePermissionsResponse!
  getSpecificRolePermissionByPermissionName(getSpecificRolePermissionByPermissionNameInput: GetSpecificRolePermissionByPermissionNameInput!): RolesPermissions!
  getAllPermissionsForAgent(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    agentId: ID!
  ): GetPermissionsForSubRoleResponse!
  getSpecificSubRolePermissionByPermissionName(getSpecificSubRolePermissionByPermissionNameInput: GetSpecificSubRolePermissionByPermissionNameInput!): SubRolePermissions!
  getAllClientExclusiveServicePermissions(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllClientExclusiveServicePermissionsResponse!
  microserviceGetClientExclusiveServicePermission(microserviceGetClientExclusiveServicePermissionInput: MicroserviceGetClientExclusiveServicePermissionInput!): ClientExclusiveServicePermissions!
  getAllClientExclusiveServicePermissionsForClientExclusivePermission(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    clientExclusiveServiceId: ID!
  ): GetAllClientExclusiveServicePermissionsResponse!
  getSpecificClientExclusiveServicePermissions(id: ID!): ClientExclusiveServicePermissions
  getAllAgents(
    search: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllAgentsResponse!
  getAllAgentsForSpecificDistributorStaff(
    search: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllAgentsResponse!
  getSpecificAgent(id: ID!): Agent
  getAllOrganizations(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllOrganizationsResponse!
  getSpecificOrganization(orgId: ID!): Organization
  loadDistributorsDataToElasticSearch(limit: Int!, offset: Int!): String!
  downloadDistributorDetails(clientId: String!): [CloudinaryDockerStandaloneResponse!]!
  getAllDistributors(
    search: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllDistributorsResponse!
  getSpecificDistributor(id: ID!): Distributor
  getSpecificDistributorSetting(distributorId: String!): DistributorSetting!
  getAllDistributorStaff(
    search: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllDistributorStaffResponse!
  getAllDistributorStaffsForSpecificDistributor(
    search: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllDistributorStaffResponse!
  getSpecificDistributorStaff(id: ID!): DistributorStaff
  getAllSuppliers(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllSuppliersResponse!
  getSpecificSupplier(id: ID!): Supplier
  loadServicersDataToElasticSearch(limit: Int!, offset: Int!): String!
  getAllServicers(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
  ): GetAllServicersResponse!
  getSpecificServicer(id: ID!): Servicer
  loadPersonsDataToElasticSearch(limit: Int!, offset: Int!): String!
  getPersonsByIds(input: StringIdsInput!): [Person!]!
  getAllPersons(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
  ): GetAllPersonsResponse!
  getSpecificCustomerOrPerson(personId: ID!): Person!
  accountsServiceCustomers(first: Int!, offset: Int!, customerName: String!): [Person!]!
  getAllClientCustomers(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
    query: String
    clientId: ID
  ): GetAllPersonsResponse!
  getAllClientPersons(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
    clientId: ID!
  ): GetAllPersonsResponse!
  getAllCustomers(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
  ): GetAllPersonsResponse!
  getAllClientExclusiveServices(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllClientExclusiveServiceResponse!
  getAllClientExclusiveServicesForServicer(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    servicerId: String!
  ): GetAllClientExclusiveServiceResponse!
  getAllClientExclusiveServicesForDistributor(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    distributorId: String!
  ): GetAllClientExclusiveServiceResponse!
  microserviceGetClientExclusiveService(microserviceGetClientExclusiveServiceInput: MicroserviceGetClientExclusiveServiceInput!): ClientExclusiveService
  getSpecificClientExclusiveService(id: ID!): ClientExclusiveService
  getAllEvents(
    filters: GetAllEventsInput

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
  ): GetAllEventsResponse!
  viewEvent(id: ID!): Event
  getAllSignals(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
    filters: GetAllSignalsInput
  ): GetAllSignalsResponse!
  getSpecificSignal(id: ID!): Signal
  getAllBrokers(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllBrokersResponse!
  getSpecificBroker(id: ID!): Broker
  getAllPublishers(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GetAllPublishersResponse!
  viewPublisher(id: ID!): Publisher
  getAllItemEvents(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
  ): GetallItemEventsResponse!
  getAllUnprocessedItemEvents(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
  ): GetallItemEventsResponse!
  loadCodeEventsDataToElasticSearch: String!
  getAllCodeEvents(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int = 10

    """Paginate last"""
    last: Int
    search: String
  ): GetAllCodeEventsResponse!
  getAllCodeEventsBetweenDates(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int = 10

    """Paginate last"""
    last: Int
    itemId: ID!
    startDate: String!
    endDate: String!
    distributorId: ID
    codeType: CodeTypes
  ): GetAllCodeEventsResponse!
  getAllCodeEventsForSpecificItemByDistributor(
    pagination: PaginationEnum = CURSOR
    limit: Int
    offset: Int

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int = 10

    """Paginate last"""
    last: Int
    itemId: ID!
    distributorId: ID
  ): GetAllCodeEventsResponse!
  getSpecificCodeEvent(id: String!): CodeEvent!
  getCodeEventsByCodeGeneratorIds(ids: [String!]!): [CodeEvent!]!
  loadCodeGensDataToElasticSearch(limit: Int!, offset: Int!): String!
  downloadDistributorCodeGens(fleetId: String!): [CloudinaryDockerStandaloneResponse!]!
  getAllCodeGenerators(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int = 10

    """Paginate last"""
    last: Int
    search: String
  ): GetAllCodeGeneratorsResponse!
  getSpecificCodeGenerator(id: String!): CodeGenerator!
  loadItemsDataToElasticSearch(limit: Int!, offset: Int!): String!
  getAllItems(
    search: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int = 10

    """Paginate last"""
    last: Int
    queryorder: QueryOrder!
  ): GetAllItemsResponse!
  downloadDistributorItems(fleetId: String!): String!
  getAllItemsforItemBatchInDescendingOrder(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int = 10

    """Paginate last"""
    last: Int
    itemBatch: ID!
  ): GetAllItemsResponse!
  getSpecificItem(itemId: ID!): Item!
  getItembyOemItemId(oemItemId: ID!): Item!
  getAllClientItemsInItemFleet(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int = 10

    """Paginate last"""
    last: Int
    search: String
    getAllClientItemsInItemFleet: GetAllClientItemsInItemFleet!
  ): GetAllItemsResponse!
  thingServiceItemsByOemItemId(first: Int!, offset: Int!, oemItemId: String!): [Item!]!
  searchItemBySellerItemID(oemItemId: String!): Item!
  getAllClientItems(
    pagination: PaginationEnum
    limit: Int
    offset: Int

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int = 10

    """Paginate last"""
    last: Int
    clientId: ID
    searchByOemItemId: String
    search: String
    assetaccount: Boolean!
    queryorder: QueryOrder!
    isOpenTokenSimulator: Boolean
  ): GetAllItemsResponse!
  getAllAgentItems(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int = 10

    """Paginate last"""
    last: Int
    agentId: ID
    search: String
  ): GetAllItemsResponse!
  getSpecificClientItemInItemFleet(getSpecificClientItemInItemFleet: GetSpecificClientItemInItemFleet!): Item!
  batchFactoryExport(batchId: String!): [BatchFactoryExportDto!]!
  batchFactoryPartialExport(oemItemIDs: [String!]!): [BatchFactoryExportDto!]!
  loadItemSKUsDataToElasticSearch: String!
  getAllItemSKUs(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int = 10

    """Paginate last"""
    last: Int
    search: String
    queryorder: QueryOrder
    filters: GetAllItemSKUsInput
  ): GetAllItemSKUsResponse!
  getSpecificItemSKU(id: String!): ItemSKU!
  loadItemBatchesDataToElasticSearch: String!
  getAllItemBatches(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int = 10

    """Paginate last"""
    last: Int
    queryorder: QueryOrder
    search: String
    filters: GetAllItemBatchesInput
  ): GetAllItemBatchesResponse!
  getSpecificItemBatch(id: String!): ItemBatch!
  getAllItemFirmwares(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int = 10

    """Paginate last"""
    last: Int
    search: String
    filters: GetAllItemFirmwaresInput
  ): GetAllItemFirmwaresResponse!
  getSpecificItemFirmware(id: String!): ItemFirmware!
  getAllItemStocks(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int = 10

    """Paginate last"""
    last: Int
    search: String
    filters: GetAllItemStocksInput
  ): GetAllItemStocksResponse!
  getSpecificItemStock(id: String!): ItemStock!
  getAllSubscribers(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int = 10

    """Paginate last"""
    last: Int
    search: String
    filters: GetAllSubscribersInput
  ): GetAllSubscribersResponse!
  getSpecificSubscriber(id: String!): Subscriber!
  getAllThingBrokers(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int = 10

    """Paginate last"""
    last: Int
    search: String
    filters: GetAllBrokersInput
  ): GetAllBrokersResponse!
  getSpecificThingBroker(id: String!): Broker
  loadCodeSystemsDataToElasticSearch: String!
  getAllCodeSystems(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int = 10

    """Paginate last"""
    last: Int
    search: String
    filters: GetAllCodeSystemsInput
  ): GetAllCodeSystemsResponse!
  getSpecificCodeSystem(id: String!): CodeSystem!
  loadAvatarsDataToElasticSearch(limit: Int!, offset: Int!): String!
  getAllAvatars(
    search: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int = 10

    """Paginate last"""
    last: Int
  ): GetAllAvatarsResponse!
  getSpecificAvatar(id: String!): Avatar
  getSpecificAvatarforItem(itemId: String!): Avatar
  downloadDistributorFleet(clientId: String!): [CloudinaryDockerStandaloneResponse!]!
  getAllItemFleets(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int = 10

    """Paginate last"""
    last: Int
    search: String
    filters: GetAllItemFleetsInput
  ): GetAllItemFleetsResponse!
  getAllItemsInItemFleet(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int = 10

    """Paginate last"""
    last: Int
    itemFleetId: String
  ): GetAllItemsResponse!
  getItemFleetsForClient(
    clientId: String!

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int = 10

    """Paginate last"""
    last: Int
    search: String
  ): GetAllItemFleetsResponse!
  getSpecificItemFleet(id: String!): ItemFleet!
}

enum QueryOrder {
  ASC
  DESC
}

input ReassignBatchItemsFromItemFleetInput {
  itemFleetId: ID!
  itemBatchId: ID!
  isHolding: Boolean
}

input ReassignFleetItemsFromItemFleetInput {
  oldItemFleetId: ID!
  newItemFleetId: ID!
}

input ReassignItemsFromItemFleetInput {
  items: [ReassignItemsFromItemFleetInputDto!]!
  itemFleetId: ID!
}

input ReassignItemsFromItemFleetInputDto {
  itemId: ID!
}

type RefreshClientToken {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  refreshToken: String!
  person: Person
  distributorStaff: DistributorStaff
  agent: Agent
  expiryDate: DateTime!
}

type RefreshToken {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  refreshToken: String!
  loginUsers: LoginUsers!
  expiryDate: DateTime!
}

input RemoveCustomerFromAgentInput {
  agentId: ID!
  customers: [ID!]!
}

input ResetDistributorPasswordInput {
  token: String!
  password: String!
}

input ResetLoginUserPasswordInput {
  token: String!
  password: String!
}

input ReverseCodeEventByDateInput {
  itemId: ID!
  date: String!
  codeGeneratorId: ID!
}

input ReverseCodeEventInput {
  itemId: ID!
  codeEventID: ID!
}

type Roles {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  permissions: [RolesPermissions!]
  distributor: [Distributor!]!
  supplier: [Supplier!]!
  servicer: [Servicer!]!
  organization: [Organization!]!
}

type RolesConnection {
  edges: [RolesEdge!]
  pageInfo: RolesPageInfo
}

type RolesEdge {
  cursor: String
  node: Roles
}

type RolesPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type RolesPermissions {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  role: Roles
  permission: Permissions
  authenticationInstance: AuthenticationInstance
}

type RolesPermissionsConnection {
  edges: [RolesPermissionsEdge!]
  pageInfo: RolesPermissionsPageInfo
}

type RolesPermissionsEdge {
  cursor: String
  node: RolesPermissions
}

type RolesPermissionsPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type Servicer {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  type: OrgTypes!
  name: String!
  description: String
  orgAddress: Address!
  orgContactPerson: Person
  services: String
  authenticationInstance: AuthenticationInstance!
  activeSubRolePermission: PermissionInput!
  role: Roles!
  clientExclusiveService: [ClientExclusiveService!]
}

type ServicerConnection {
  edges: [ServicerEdge!]
  pageInfo: ServicerPageInfo
}

type ServicerEdge {
  cursor: String
  node: Servicer
}

type ServicerPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type Signal {
  _id: ID!
  publisher: Publisher
  jmp: JSON!
  time: DateTime!
}

type SignalConnection {
  edges: [SignalEdge!]
  pageInfo: SignalPageInfo
}

type SignalEdge {
  cursor: String
  node: Signal
}

type SignalPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

input SignInCredentialsDto {
  email: String!
  password: String!
}

input SignInCredentialsInput {
  email: String!
  password: String!
}

input SignUpClientInput {
  personType: PersonTypes = LOGIN
  personName: String!
  personDescription: String
  phone: String!
  social: String!
  authenticationToken: String
  email: String!
  password: String!
  address: AddressDto!
}

input SignUpCredentialsDto {
  firstName: String!
  lastName: String!
  idType: PersonalIDTypes!
  idString: String!
  birthDate: DateTime!
  profile: String!
  email: String!
  authenticationToken: String
  password: String!
}

input SignUpDistributorStaffOrAgentInput {
  authenticationToken: String!
  email: String!
  password: String!
}

input StringFilterInput {
  and: [String!]
  or: [String!]
  not: StringFilterInput
  eq: String
  ne: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String!]
  notIn: [String!]
  between: [String!]
}

input StringIdsInput {
  ids: [String!]!
}

type SubRolePermissions {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  name: PermissionInput
  subrole: SubRoles!
  permission: Permissions!
  authenticationInstance: AuthenticationInstance!
  activeSubRolePermission: PermissionInput
  authenticationSubInstance: AuthenticationSubInstance
  agent: Agent
  distributorStaff: DistributorStaff
  distributor: Distributor
  supplier: Supplier
  servicer: Servicer
  organization: Organization
}

type SubRolePermissionsConnection {
  edges: [SubRolePermissionsEdge!]
  pageInfo: SubRolePermissionsPageInfo
}

type SubRolePermissionsEdge {
  cursor: String
  node: SubRolePermissions
}

type SubRolePermissionsPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type SubRoles {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  role: Roles
  agent: [Agent!]!
}

type SubRolesConnection {
  edges: [SubRolesEdge!]
  pageInfo: SubRolesPageInfo
}

type SubRolesEdge {
  cursor: String
  node: SubRoles
}

type SubRolesPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

enum SubRoleTypesInput {
  SERVICE_AGENT
  INSTALLER_AGENT
  CREDIT_AGENT
  GENERAL_AGENT
  DISTRIBUTOR_STAFF
}

type Subscriber {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  topic: String!
  broker: Broker
}

type SubscriberConnection {
  edges: [SubscriberEdge!]
  pageInfo: SubscriberPageInfo
}

type SubscriberEdge {
  cursor: String
  node: Subscriber
}

type SubscriberPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type Success {
  message: String!
  status: Float!
}

type Supplier {
  _id: ID!
  authenticationSubInstance: AuthenticationSubInstance!
  subRolePermissions: SubRolePermissions!
  deleteStatus: Boolean
  deleteAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  type: OrgTypes!
  name: String!
  description: String
  orgAddress: Address!
  orgContactPerson: Person
  authenticationInstance: AuthenticationInstance!
  activeSubRolePermission: PermissionInput!
  role: Roles!
  itemSKU: [ItemSKU!]!
}

type SupplierConnection {
  edges: [SupplierEdge!]
  pageInfo: SupplierPageInfo
}

type SupplierEdge {
  cursor: String
  node: Supplier
}

type SupplierPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

enum ThingIDTypes {
  UUID
  MAC
  DOI
}

input UnassignItemFleetInput {
  itemFleetId: ID!
  itemId: ID!
}

input UnassignItemsFleetInput {
  itemFleetId: ID!
}

type UnassignItemsFleetResponse {
  errors: String!
  success: String!
}

input UpdateActionDto {
  type: ActionTypes
  label: String
  description: String
}

input UpdateActorDto {
  type: ActorTypes
  name: String
  description: String
}

input UpdateAddressDto {
  unit: String
  street: String
  city: String
  srpc: String
  country: String
  postcode: String
  UpdateLocationAddressDto: UpdateLocationDto
}

input UpdateAgentInput {
  agentId: ID!
  subRoleId: ID
  agentID: String
  agentType: String
  hireDate: DateTime

  """Specify the type of agent for the distributor staff"""
  typeOfAgent: String
  officeAddress: UpdateAddressDto
  firstName: String
  lastName: String
  gender: String
  age: Float
  agentContact: UpdateContactDto
  agentAddress: UpdateAddressDto
}

input UpdateAssetAccountInput {
  assetAccountId: ID!
  credit: CreditAccountDTO
  paySchedule: PaymentDTO
  paymentPlan: PayPlanBaseEntityDto
  meta: [AssetAccountMetaDto!]
}

input UpdateAssignedPermissionToRoleInput {
  rolePermissionId: ID!
  roleId: ID
  permissionId: ID
  authenticationInstanceId: ID
  name: PermissionInput
}

input UpdateAuthenticationInstanceInput {
  instanceId: ID!
  name: String!
}

input UpdateAuthenticationSubInstanceInput {
  name: String
  distributorId: ID!
  subInstanceId: ID!
}

input UpdateAvatarByItemIDInput {
  itemId: ID!

  """Provide ID for the corresponding Item"""
  shadow: ID

  """Status of item online status"""
  itemAlive: Boolean
  lastSync: DateTime
  lastPub: String
  lastSub: String
  att: [AttributeDto!]
  sts: [AttributeDto!]
  cmd: [AttributeDto!]
  dta: [AttributeDto!]
  dia: [AttributeDto!]
}

input UpdateAvatarInput {
  avatarId: ID!

  """Provide ID for the corresponding Item"""
  shadow: ID

  """Status of item online status"""
  itemAlive: Boolean
  lastSync: DateTime
  lastPub: String
  lastSub: String
  att: [AttributeDto!]
  sts: [AttributeDto!]
  cmd: [AttributeDto!]
  dta: [AttributeDto!]
  dia: [AttributeDto!]
}

input UpdateBrokerInput {
  brokerId: ID!
  name: String
  url: String
  port: Int
  login: String
  password: String
}

input UpdateClientExclusiveServiceInput {
  clientExclusiveServiceId: ID!
  servicerId: ID
  distributorId: ID
  serviceType: ClientExclusiveServiceTypes
}

input UpdateClientPersonInput {
  personId: ID!
  clientPersonType: PersonTypes
  clientPersonName: String
  clientPersonDescription: String
  clientContactPerson: PersonContactDto
  clientPersonAddress: AddressDto

  """This value is the distributorId"""
  clientId: ID
  details: [DetailDto!]
  gender: String
}

input UpdateCodeGenHashTopInBulkInput {
  bulkCodeGenHashTopParams: [CodeGenHashTopParameters!]!
}

input UpdateCodeGenStateInput {
  codeGenState: [CodeGenState!]!
}

type UpdateCodeGenStateResponse {
  errors: String!
  success: String!
}

input UpdateContactDto {
  phone: String
  email: String
  social: String
}

input UpdateDistributorInput {
  distributorId: ID!
  distributorType: OrgTypes
  distributorName: String
  distributorDescription: String
  distributorAddress: UpdateAddressDto
  distributorContactPerson: UpdatePersonDto
  contactRole: String
}

input UpdateDistributorSettingInput {
  distributorId: ID!

  """Default number of FREECODES is 5"""
  freeCodeCount: Int = 5

  """Default number of RESETCODES is 5"""
  resetCodeCount: Int = 5

  """Number of code events allowed for an item within 24 hours."""
  dayCodeCountLimit: Int

  """
  Total number of code events allowed for an item. Default is approximately 3 years (1096 events).
  """
  totalCodeCountLimit: Int

  """
  Minimum time (in milliseconds) between two subsequent code events for an item. Default is 1 minute.
  """
  codeGenInterval: Int

  """
  Maximum number of days code that an item can have in a given period. Default is 60
  """
  maxCreditStackDays: Int!

  """
  `n` number of code event used to calculate the credit stackings. Default is 5
  """
  maxCreditStackCodeEvents: Int!
}

input UpdateDistributorStaffInput {
  distributorStaffId: ID!
  subRoleId: ID
  staffID: String
  hireDate: DateTime
  officeAddress: UpdateAddressDto
  firstName: String
  lastName: String
  gender: String
  age: Float
  staffContact: UpdateContactDto
  staffAddress: UpdateAddressDto
}

input UpdateEventInput {
  eventId: ID!
  actor: UpdateActorDto
  action: UpdateActionDto
  time: DateTime
  location: UpdateLocationInputDto
  signal: Boolean
}

input UpdateGattDto {
  attributes: AttributeDto!
}

input UpdateItemBatchInput {
  itemBatchId: ID!
  actorTypes: ActorTypes
  actionScope: ActionScope
  batchNumber: String
  itemSKUId: ID
  batchDate: DateTime
  description: String
  actorName: String
  profile: String
  batchState: BatchState
}

input UpdateItemEventInput {
  actor: ActorDto!
  action: ActionDto!
  time: DateTime!
  location: LocationInputDto!
  signal: Boolean!
  status: ProcessStatusTypes! = STARTED
  type: ItemEventTypes! = INITIALIZATION
  description: String! = "Default Item Event Description"
  total: Int
  processed: Int
  lastProcessedId: String
  itemEventId: ID!
}

input UpdateItemFirmwareInput {
  itemFirmwareId: ID!
  actorTypes: ActorTypes
  actionScope: ActionScope
  actorName: String
  profile: String
  version: String
  description: String
  codeSystem: CodeSystemType
}

input UpdateItemFleetCodeGenInput {
  itemFleetId: ID!

  """Default number of FREECODES is 5"""
  freeCodeCount: Int

  """Default number of RESETCODES is 5"""
  resetCodeCount: Int
  disableResetCodeCount: Boolean

  """Number of code events allowed for an item within 24 hours."""
  dayCodeCountLimit: Int
  disableDayCodeCountLimit: Boolean

  """
  Total number of code events allowed for an item. Default is approximately 3 years (1096 events).
  """
  totalCodeCountLimit: Int
  disableTotalCodeCountLimit: Boolean

  """
  Minimum time (in milliseconds) between two subsequent code events for an item. Default is 1 minute.
  """
  codeGenInterval: Int
  disableCodeGenInterval: Boolean

  """
  Maximum number of days code that an item can have in a given period. Default is 60
  """
  maxCreditStackDays: Int
  disableMaxCreditStackDays: Boolean

  """
  `n` number of code event used to calculate the credit stackings. Default is 5
  """
  maxCreditStackCodeEvents: Int
  disableMaxCreditStackCodeEvents: Boolean
  disableFreeCode: Boolean

  """Number of days to check duration of day codes"""
  daysToCheckDuration: Int
  disableDaysToCheckDuration: Boolean

  """Minimum number of day codes generated in a specified duration"""
  minimumDayCodesGenerated: Int
  disableMinimumDayCodesGenerated: Boolean
}

input UpdateItemFleetInput {
  description: String
  freeCodeCount: Float
  disableFreeCode: Boolean

  """Default number of RESETCODES is 5"""
  resetCodeCount: Int
  disableResetCodeCount: Boolean

  """Number of code events allowed for an item within 24 hours."""
  dayCodeCountLimit: Int
  disableDayCodeCountLimit: Boolean

  """
  Total number of code events allowed for an item. Default is approximately 3 years (1096 events).
  """
  totalCodeCountLimit: Int
  disableTotalCodeCountLimit: Boolean

  """
  Minimum time (in milliseconds) between two subsequent code events for an item. Default is 1 minute.
  """
  codeGenInterval: Int
  disableCodeGenInterval: Boolean

  """
  Maximum number of days code that an item can have in a given period. Default is 60
  """
  maxCreditStackDays: Int
  disableMaxCreditStackDays: Boolean

  """
  `n` number of code event used to calculate the credit stackings. Default is 5
  """
  maxCreditStackCodeEvents: Int
  disableMaxCreditStackCodeEvents: Boolean

  """Number of days to check duration of day codes"""
  daysToCheckDuration: Int
  disableDaysToCheckDuration: Boolean

  """Minimum number of day codes generated in a specified duration"""
  minimumDayCodesGenerated: Int
  disableMinimumDayCodesGenerated: Boolean
  itemFleetId: ID!
  fleetName: String
  actorTypes: ActorTypes
  actionScope: ActionScope
  actorName: String
  profile: String

  """
  The input value named clientId means distributorId or organizationId, ngoId, governmentId etc
  """
  clientId: ID
  assignDate: DateTime
}

input UpdateItemInput {
  itemId: ID!
  itemFleetId: ID
  idType: ThingIDTypes
  actorTypes: ActorTypes
  actionScope: ActionScope

  """This field represent the previous field named name"""
  actorName: String
  itemStockId: ID
  profile: String
  idString: String
  description: String
  creationDate: DateTime
  oemID: String
  oemItemID: String

  """ This field represent the previous field of itemOEM_ID """
  sellerID: String

  """ This field represent the previous field of itemPAYG_ID """
  sellerItemID: String
  itembatchId: ID
  itemfirmwareId: ID
  lifeCycle: LifeCycle
  codegeneratorId: ID
}

input UpdateItemSKUInput {
  itemSKUId: ID!
  actorTypes: ActorTypes
  actionScope: ActionScope
  actorName: String
  profile: String
  productBase: String
  skuName: String
  mainMediaURL: ID
  oemDescription: String
  gattName: String
  gatt: UpdateGattDto
}

input UpdateItemStockInput {
  itemStockId: ID!
  stockName: String
  locator: String
  stockCosts: Float
  batchId: ID
  quantity: Int
  itemList: [ItemDto!]
}

input UpdateLegacyCodeGenParametersInput {
  itemId: ID!
  codeSystemId: ID!
  hashTop: String!
  hashIndex: Int!
  codeCount: Int!
}

input UpdateLocationDto {
  lat: Float
  lng: Float
}

input UpdateLocationInputDto {
  placeName: String
  latitude: Float
  longitude: Float
}

input UpdateLoginUserInput {
  loginUserId: ID!
  firstName: String
  lastName: String
  email: String
  password: String!
}

input UpdateMessageGroupInput {
  name: String!
  description: String!
  persons: [PersonDto!]
  distributor: ID
}

input UpdateMessageTemplateInput {
  name: String!
  description: String!
  messageBody: String!
  distributor: ID!
  intent: IntentsEnum!
  messageCourier: MessageCourierEnum
}

input UpdateOpenTokenDecoderInput {
  oem_item_id: String!
  token: String!
  secret_key: String!
  starting_code: String!
  max_count: Int!
  used_count: Int!
}

input UpdateOrganizationInput {
  orgId: ID!
  orgType: OrgTypes
  orgProfile: String
  orgName: String
  orgDescription: String
  orgAddress: UpdateAddressDto
  orgContactPerson: UpdatePersonDto
  contactRole: String
}

input UpdatePayPlanInput {
  payPlanId: ID!

  """
  Default plan type is NO-PLAN, indicating manual payment and code generation
  """
  planName: String = "NO-PLAN"
  planDescription: String!
  useUpfront: Boolean
  planDetails: [PlanDetailDto!]
}

input UpdatePermissionInput {
  name: PermissionInput!
  permissionId: ID!
}

input UpdatePersonDto {
  personType: PersonTypes
  personName: String
  personDescription: String
  contact: UpdateContactDto
  address: UpdateAddressDto
}

input UpdatePublisherInput {
  publisherId: ID!
  topic: String
  broker: ID
}

input UpdateRoleInput {
  name: String!
  roleId: ID!
}

input UpdateSellerIdInput {
  oemItemID: String!
  sellerItemID: Float!
}

input UpdateSellerIdInputDTO {
  items: [UpdateSellerIdInput!]!
}

input UpdateServicerInput {
  servicerId: ID!
  servicerType: OrgTypes
  servicerName: String
  servicerDescription: String
  servicerAddress: UpdateAddressDto
  servicerContactPerson: UpdatePersonDto
  contactRole: String
}

input UpdateSignalInput {
  signalId: ID!
  jmp: JSON
  publisher: ID
  time: DateTime
}

input UpdateSubRoleInput {
  name: SubRoleTypesInput
  subroleId: ID!
  roleId: ID
}

input UpdateSubscriberInput {
  subscriberId: ID!
  topic: String
  brokerId: ID
}

input UpdateSupplierInput {
  supplierId: ID!
  supplierType: OrgTypes
  supplierName: String
  supplierDescription: String
  supplierAddress: UpdateAddressDto
  supplierContactPerson: UpdatePersonDto
  contactRole: String
}

input UpdateTokenDataInput {
  oem_item_id: String!
  token_type: OpenTokenCodeType!
  token_value: Int!
  max_count: Int!
  starting_code: String!
  secret_key: String!
}

input UpdateUserPasswordInput {
  newPassword: String!
  oldPassword: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input uploadAssetAccountFromCSVURLInput {
  """URL that has CSV file"""
  url: String!
}

type User {
  _id: ID!
  deleteStatus: Boolean
  deleteAt: DateTime
  accessToken: String
  refreshToken: String
  createdAt: DateTime
  updatedAt: DateTime
  email: String
  name: String
  roleName: String
  firstName: String
  lastName: String
}

